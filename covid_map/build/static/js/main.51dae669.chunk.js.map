{"version":3,"sources":["mapStyle.js","App.js","serviceWorker.js","total.js","index.js"],"names":["featureType","elementType","stylers","saturation","color","lightness","visibility","weight","WrappedMap","withScriptjs","withGoogleMap","useState","lat","lng","cty","cnt","cnf","rcv","dth","selectedCity","setSelectedCity","ccases","setCCases","useEffect","fetch","then","response","json","responseJson","defaultZoom","defaultCenter","defaultOptions","styles","mapStyle","features","map","place","key","properties","OBJECTID","position","Lat","Long_","onClick","lt","ln","ct","Province_State","cn","Country_Region","cf","Confirmed","rv","Recovered","dt","Deaths","isNaN","icon","url","scaledSize","window","google","maps","Size","Math","log","options","maxWidth","onCloseClick","style","width","src","alt","height","App","className","googleMapURL","loadingElement","containerElement","mapElement","Boolean","location","hostname","match","Total","info","setInfo","method","headers","catch","err","console","textAlign","paddingTop","backgroundColor","borderRadius","Intl","NumberFormat","format","confirmed","recovered","deaths","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.51dae669.chunk.js","sourcesContent":["export default [\n  {\n    featureType: \"all\",\n    elementType: \"labels.text.fill\",\n    stylers: [\n      {\n        saturation: 36,\n      },\n      {\n        color: \"#000000\",\n      },\n      {\n        lightness: 40,\n      },\n    ],\n  },\n  {\n    featureType: \"all\",\n    elementType: \"labels.text.stroke\",\n    stylers: [\n      {\n        visibility: \"on\",\n      },\n      {\n        color: \"#000000\",\n      },\n      {\n        lightness: 16,\n      },\n    ],\n  },\n  {\n    featureType: \"all\",\n    elementType: \"labels.icon\",\n    stylers: [\n      {\n        visibility: \"off\",\n      },\n    ],\n  },\n  {\n    featureType: \"administrative\",\n    elementType: \"geometry.fill\",\n    stylers: [\n      {\n        color: \"#000000\",\n      },\n      {\n        lightness: 20,\n      },\n    ],\n  },\n  {\n    featureType: \"administrative\",\n    elementType: \"geometry.stroke\",\n    stylers: [\n      {\n        color: \"#000000\",\n      },\n      {\n        lightness: 17,\n      },\n      {\n        weight: 1.2,\n      },\n    ],\n  },\n  {\n    featureType: \"landscape\",\n    elementType: \"geometry\",\n    stylers: [\n      {\n        color: \"#000000\",\n      },\n      {\n        lightness: 20,\n      },\n    ],\n  },\n  {\n    featureType: \"poi\",\n    elementType: \"geometry\",\n    stylers: [\n      {\n        color: \"#000000\",\n      },\n      {\n        lightness: 21,\n      },\n    ],\n  },\n  {\n    featureType: \"road.highway\",\n    elementType: \"geometry.fill\",\n    stylers: [\n      {\n        color: \"#000000\",\n      },\n      {\n        lightness: 17,\n      },\n    ],\n  },\n  {\n    featureType: \"road.highway\",\n    elementType: \"geometry.stroke\",\n    stylers: [\n      {\n        color: \"#000000\",\n      },\n      {\n        lightness: 29,\n      },\n      {\n        weight: 0.2,\n      },\n    ],\n  },\n  {\n    featureType: \"road.arterial\",\n    elementType: \"geometry\",\n    stylers: [\n      {\n        color: \"#000000\",\n      },\n      {\n        lightness: 18,\n      },\n    ],\n  },\n  {\n    featureType: \"road.local\",\n    elementType: \"geometry\",\n    stylers: [\n      {\n        color: \"#000000\",\n      },\n      {\n        lightness: 16,\n      },\n    ],\n  },\n  {\n    featureType: \"transit\",\n    elementType: \"geometry\",\n    stylers: [\n      {\n        color: \"#000000\",\n      },\n      {\n        lightness: 19,\n      },\n    ],\n  },\n  {\n    featureType: \"water\",\n    elementType: \"geometry\",\n    stylers: [\n      {\n        color: \"#000000\",\n      },\n      {\n        lightness: 17,\n      },\n    ],\n  },\n];\n","//Icon author: Icons made by <a href=\"https://www.flaticon.com/authors/freepik\" title=\"Freepik\">Freepik</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\"> www.flaticon.com</a>\n\nimport React, { useState, useEffect } from \"react\";\nimport {\n  GoogleMap,\n  withScriptjs,\n  withGoogleMap,\n  InfoWindow,\n  Marker,\n} from \"react-google-maps\";\nimport mapStyle from \"./mapStyle.js\";\n//Could not get clusters to work due to the data inconsistency\n//const {MarkerClusterer} = require(\"react-google-maps/lib/components/addons/MarkerClusterer\");\n\nfunction Map() {\n  const [selectedCity, setSelectedCity] = useState({\n    lat: null,\n    lng: null,\n    cty: null,\n    cnt: null,\n    cnf: null,\n    rcv: null,\n    dth: null,\n  });\n\n  function pass(lt, ln, ct, cn, cf, rv, dt) {\n    if (!isNaN(lt) || lt != null) {\n      if (!isNaN(ln) || ln != null) {\n        setSelectedCity({\n          lat: lt,\n          lng: ln,\n          cty: ct,\n          cnt: cn,\n          cnf: cf,\n          rcv: rv,\n          dth: dt,\n        });\n      }\n    }\n  }\n  const [ccases, setCCases] = useState(null);\n  //var obtain = false;\n  //const [data, setData] = useState({ cases: null });\n  useEffect(() => {\n    fetch(\n      \"https://opendata.arcgis.com/datasets/bbb2e4f589ba40d692fab712ae37b9ac_1.geojson\"\n    )\n      .then((response) => response.json())\n      .then(\n        (responseJson) => setCCases(responseJson)\n\n        // jsonData is parsed json object received from url\n      );\n  }, [setCCases]);\n  return (\n    <GoogleMap\n      defaultZoom={4}\n      defaultCenter={{ lat: 37.0902, lng: -95.7129 }}\n      defaultOptions={{ styles: mapStyle }}\n    >\n      {ccases &&\n        ccases.features.map((place) => (\n          <Marker\n            key={place.properties.OBJECTID}\n            position={{\n              lat: place.properties.Lat,\n              lng: place.properties.Long_,\n            }}\n            onClick={() =>\n              pass(\n                place.properties.Lat,\n                place.properties.Long_,\n                place.properties.Province_State,\n                place.properties.Country_Region,\n                place.properties.Confirmed,\n                place.properties.Recovered,\n                place.properties.Deaths\n              )\n            }\n            icon={{\n              url: \"/coronavirus.svg\",\n              scaledSize: new window.google.maps.Size(\n                Math.log(place.properties.Confirmed) * 3,\n                Math.log(place.properties.Confirmed) * 3\n              ),\n            }}\n          />\n        ))}\n      {selectedCity.lat != null && selectedCity.lng != null && (\n        <InfoWindow\n          position={{\n            lat: selectedCity.lat,\n            lng: selectedCity.lng,\n          }}\n          options={{\n            maxWidth: 500,\n          }}\n          onCloseClick={() => {\n            setSelectedCity({\n              lat: null,\n              lng: null,\n              cty: null,\n              cnt: null,\n              cnf: null,\n              rcv: null,\n              dth: null,\n            });\n          }}\n        >\n          <div style={{ width: \"200px\" }}>\n            <h1>\n              {selectedCity.cty}, {selectedCity.cnt}\n              <img\n                src={\"/coronavirus.svg\"}\n                alt=\"\"\n                width=\"30vmin\"\n                height=\"30vmin\"\n              />\n            </h1>\n            <h3 style={{ color: \"green\" }}>Confirmed: {selectedCity.cnf}</h3>\n            <h3 style={{ color: \"orange\" }}>Recovered: {selectedCity.rcv}</h3>\n            <h3 style={{ color: \"red\" }}>Deaths: {selectedCity.dth}</h3>\n          </div>\n        </InfoWindow>\n      )}\n    </GoogleMap>\n  );\n}\n\nconst WrappedMap = withScriptjs(withGoogleMap(Map));\nfunction App() {\n  return (\n    <div className=\"App\" style={{ width: \"100vw\", height: \"100vh\" }}>\n      <WrappedMap\n        googleMapURL={\n          \"https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=AIzaSyDnwT8wbcgGl3mz0qhqb4dJpdHl6k-D--4\"\n        }\n        loadingElement={<div style={{ height: \"100%\" }} />}\n        containerElement={<div style={{ height: \"100%\" }} />}\n        mapElement={<div style={{ height: \"100%\" }} />}\n      />\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useState, useEffect } from \"react\";\n\nfunction Total() {\n  const [info, setInfo] = useState(null);\n  useEffect(() => {\n    fetch(\"https://covid-19-data.p.rapidapi.com/totals?format=json\", {\n      method: \"GET\",\n      headers: {\n        \"x-rapidapi-host\": \"covid-19-data.p.rapidapi.com\",\n        \"x-rapidapi-key\": \"1d4a63eb5dmshedfd7c1ab6075cep1a20bfjsnee48c2d9b899\",\n      },\n    })\n      .then((response) => response.json())\n      .then((responseJson) => setInfo(responseJson))\n      .catch((err) => {\n        console.log(err);\n      });\n  }, [setInfo]);\n  return (\n    <div>\n      {info && (\n        <div\n          style={{\n            textAlign: \"center\",\n            paddingTop: \"1vmin\",\n            backgroundColor: \"white\",\n            width: \"35vmin\",\n            height: \"25vmin\",\n            borderRadius: \"5vmin\",\n          }}\n        >\n          <h2>WORLD COUNT</h2>\n          <h3 style={{ color: \"green\" }}>\n            Confirmed: {new Intl.NumberFormat().format(info[0].confirmed)}\n          </h3>\n          <h3 style={{ color: \"orange\" }}>\n            recovered: {new Intl.NumberFormat().format(info[0].recovered)}\n          </h3>\n          <h3 style={{ color: \"red\" }}>\n            Deaths: {new Intl.NumberFormat().format(info[0].deaths)}\n          </h3>\n        </div>\n      )}\n    </div>\n  );\n}\nexport default Total;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Total from \"./total\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nReactDOM.render(<Total />, document.getElementById(\"over_map\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}