{"ast":null,"code":"\"use strict\"; // The MIT License (MIT)\n//\n// Copyright (c) 2017 Firebase\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst apps_1 = require(\"./apps\");\n\nconst analytics = require(\"./providers/analytics\");\n\nconst auth = require(\"./providers/auth\");\n\nconst crashlytics = require(\"./providers/crashlytics\");\n\nconst database = require(\"./providers/database\");\n\nconst firestore = require(\"./providers/firestore\");\n\nconst https = require(\"./providers/https\");\n\nconst pubsub = require(\"./providers/pubsub\");\n\nconst remoteConfig = require(\"./providers/remoteConfig\");\n\nconst storage = require(\"./providers/storage\");\n\nconst testLab = require(\"./providers/testLab\");\n\nclass HandlerBuilder {\n  constructor() {}\n\n  get https() {\n    return {\n      /**\n       * Handle HTTP requests.\n       * @param handler A function that takes a request and response object,\n       * same signature as an Express app.\n       */\n      onRequest: handler => {\n        const func = https._onRequestWithOptions(handler, {});\n\n        func.__trigger = {};\n        return func;\n      },\n\n      /**\n       * Declares a callable method for clients to call using a Firebase SDK.\n       * @param handler A method that takes a data and context and returns a value.\n       */\n      onCall: handler => {\n        const func = https._onCallWithOptions(handler, {});\n\n        func.__trigger = {};\n        return func;\n      }\n    };\n  }\n\n  get database() {\n    return {\n      /**\n       * Selects a database instance that will trigger the function.\n       * If omitted, will pick the default database for your project.\n       */\n      get instance() {\n        return {\n          get ref() {\n            return new database.RefBuilder(apps_1.apps(), () => null, {});\n          }\n\n        };\n      },\n\n      /**\n       * Select Firebase Realtime Database Reference to listen to.\n       *\n       * This method behaves very similarly to the method of the same name in the\n       * client and Admin Firebase SDKs. Any change to the Database that affects the\n       * data at or below the provided `path` will fire an event in Cloud Functions.\n       *\n       * There are three important differences between listening to a Realtime\n       * Database event in Cloud Functions and using the Realtime Database in the\n       * client and Admin SDKs:\n       * 1. Cloud Functions allows wildcards in the `path` name. Any `path` component\n       *    in curly brackets (`{}`) is a wildcard that matches all strings. The value\n       *    that matched a certain invocation of a Cloud Function is returned as part\n       *    of the `context.params` object. For example, `ref(\"messages/{messageId}\")`\n       *    matches changes at `/messages/message1` or `/messages/message2`, resulting\n       *    in  `context.params.messageId` being set to `\"message1\"` or `\"message2\"`,\n       *    respectively.\n       * 2. Cloud Functions do not fire an event for data that already existed before\n       *    the Cloud Function was deployed.\n       * 3. Cloud Function events have access to more information, including information\n       *    about the user who triggered the Cloud Function.\n       */\n      get ref() {\n        return new database.RefBuilder(apps_1.apps(), () => null, {});\n      }\n\n    };\n  }\n\n  get firestore() {\n    return {\n      /**\n       * Listen for events on a Firestore document. A Firestore document contains a set of\n       * key-value pairs and may contain subcollections and nested objects.\n       */\n      get document() {\n        return new firestore.DocumentBuilder(() => null, {});\n      },\n\n      /** @hidden */\n      get namespace() {\n        return new firestore.DocumentBuilder(() => null, {});\n      },\n\n      /** @hidden */\n      get database() {\n        return new firestore.DocumentBuilder(() => null, {});\n      }\n\n    };\n  }\n\n  get crashlytics() {\n    return {\n      /**\n       * Handle events related to Crashlytics issues. An issue in Crashlytics is an\n       * aggregation of crashes which have a shared root cause.\n       */\n      get issue() {\n        return new crashlytics.IssueBuilder(() => null, {});\n      }\n\n    };\n  }\n\n  get remoteConfig() {\n    return {\n      /**\n       * Handle all updates (including rollbacks) that affect a Remote Config\n       * project.\n       * @param handler A function that takes the updated Remote Config template\n       * version metadata as an argument.\n       */\n      onUpdate: handler => {\n        return new remoteConfig.UpdateBuilder(() => null, {}).onUpdate(handler);\n      }\n    };\n  }\n\n  get analytics() {\n    return {\n      /**\n       * Select analytics events to listen to for events.\n       */\n      get event() {\n        return new analytics.AnalyticsEventBuilder(() => null, {});\n      }\n\n    };\n  }\n\n  get storage() {\n    return {\n      /**\n       * The optional bucket function allows you to choose which buckets' events to handle.\n       * This step can be bypassed by calling object() directly, which will use the default\n       * Cloud Storage for Firebase bucket.\n       */\n      get bucket() {\n        return new storage.BucketBuilder(() => null, {}).object();\n      },\n\n      /**\n       * Handle events related to Cloud Storage objects.\n       */\n      get object() {\n        return new storage.ObjectBuilder(() => null, {});\n      }\n\n    };\n  }\n\n  get pubsub() {\n    return {\n      /**\n       * Select Cloud Pub/Sub topic to listen to.\n       */\n      get topic() {\n        return new pubsub.TopicBuilder(() => null, {});\n      },\n\n      /**\n       * Handle periodic events triggered by Cloud Scheduler.\n       */\n      get schedule() {\n        return new pubsub.ScheduleBuilder(() => null, {});\n      }\n\n    };\n  }\n\n  get auth() {\n    return {\n      /**\n       * Handle events related to Firebase authentication users.\n       */\n      get user() {\n        return new auth.UserBuilder(() => null, {});\n      }\n\n    };\n  }\n\n  get testLab() {\n    /** Handle events related to Test Lab test matrices. */\n    return {\n      get testMatrix() {\n        return new testLab.TestMatrixBuilder(() => null, {});\n      }\n\n    };\n  }\n\n}\n\nexports.HandlerBuilder = HandlerBuilder;\nexports.handler = new HandlerBuilder();","map":{"version":3,"sources":["/Users/a3506/Documents/WebDev/Map/WebDev/covid_map/node_modules/firebase-functions/lib/handler-builder.js"],"names":["Object","defineProperty","exports","value","apps_1","require","analytics","auth","crashlytics","database","firestore","https","pubsub","remoteConfig","storage","testLab","HandlerBuilder","constructor","onRequest","handler","func","_onRequestWithOptions","__trigger","onCall","_onCallWithOptions","instance","ref","RefBuilder","apps","document","DocumentBuilder","namespace","issue","IssueBuilder","onUpdate","UpdateBuilder","event","AnalyticsEventBuilder","bucket","BucketBuilder","object","ObjectBuilder","topic","TopicBuilder","schedule","ScheduleBuilder","user","UserBuilder","testMatrix","TestMatrixBuilder"],"mappings":"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","sourcesContent":["\"use strict\";\n// The MIT License (MIT)\n//\n// Copyright (c) 2017 Firebase\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst apps_1 = require(\"./apps\");\nconst analytics = require(\"./providers/analytics\");\nconst auth = require(\"./providers/auth\");\nconst crashlytics = require(\"./providers/crashlytics\");\nconst database = require(\"./providers/database\");\nconst firestore = require(\"./providers/firestore\");\nconst https = require(\"./providers/https\");\nconst pubsub = require(\"./providers/pubsub\");\nconst remoteConfig = require(\"./providers/remoteConfig\");\nconst storage = require(\"./providers/storage\");\nconst testLab = require(\"./providers/testLab\");\nclass HandlerBuilder {\n    constructor() { }\n    get https() {\n        return {\n            /**\n             * Handle HTTP requests.\n             * @param handler A function that takes a request and response object,\n             * same signature as an Express app.\n             */\n            onRequest: (handler) => {\n                const func = https._onRequestWithOptions(handler, {});\n                func.__trigger = {};\n                return func;\n            },\n            /**\n             * Declares a callable method for clients to call using a Firebase SDK.\n             * @param handler A method that takes a data and context and returns a value.\n             */\n            onCall: (handler) => {\n                const func = https._onCallWithOptions(handler, {});\n                func.__trigger = {};\n                return func;\n            },\n        };\n    }\n    get database() {\n        return {\n            /**\n             * Selects a database instance that will trigger the function.\n             * If omitted, will pick the default database for your project.\n             */\n            get instance() {\n                return {\n                    get ref() {\n                        return new database.RefBuilder(apps_1.apps(), () => null, {});\n                    },\n                };\n            },\n            /**\n             * Select Firebase Realtime Database Reference to listen to.\n             *\n             * This method behaves very similarly to the method of the same name in the\n             * client and Admin Firebase SDKs. Any change to the Database that affects the\n             * data at or below the provided `path` will fire an event in Cloud Functions.\n             *\n             * There are three important differences between listening to a Realtime\n             * Database event in Cloud Functions and using the Realtime Database in the\n             * client and Admin SDKs:\n             * 1. Cloud Functions allows wildcards in the `path` name. Any `path` component\n             *    in curly brackets (`{}`) is a wildcard that matches all strings. The value\n             *    that matched a certain invocation of a Cloud Function is returned as part\n             *    of the `context.params` object. For example, `ref(\"messages/{messageId}\")`\n             *    matches changes at `/messages/message1` or `/messages/message2`, resulting\n             *    in  `context.params.messageId` being set to `\"message1\"` or `\"message2\"`,\n             *    respectively.\n             * 2. Cloud Functions do not fire an event for data that already existed before\n             *    the Cloud Function was deployed.\n             * 3. Cloud Function events have access to more information, including information\n             *    about the user who triggered the Cloud Function.\n             */\n            get ref() {\n                return new database.RefBuilder(apps_1.apps(), () => null, {});\n            },\n        };\n    }\n    get firestore() {\n        return {\n            /**\n             * Listen for events on a Firestore document. A Firestore document contains a set of\n             * key-value pairs and may contain subcollections and nested objects.\n             */\n            get document() {\n                return new firestore.DocumentBuilder(() => null, {});\n            },\n            /** @hidden */\n            get namespace() {\n                return new firestore.DocumentBuilder(() => null, {});\n            },\n            /** @hidden */\n            get database() {\n                return new firestore.DocumentBuilder(() => null, {});\n            },\n        };\n    }\n    get crashlytics() {\n        return {\n            /**\n             * Handle events related to Crashlytics issues. An issue in Crashlytics is an\n             * aggregation of crashes which have a shared root cause.\n             */\n            get issue() {\n                return new crashlytics.IssueBuilder(() => null, {});\n            },\n        };\n    }\n    get remoteConfig() {\n        return {\n            /**\n             * Handle all updates (including rollbacks) that affect a Remote Config\n             * project.\n             * @param handler A function that takes the updated Remote Config template\n             * version metadata as an argument.\n             */\n            onUpdate: (handler) => {\n                return new remoteConfig.UpdateBuilder(() => null, {}).onUpdate(handler);\n            },\n        };\n    }\n    get analytics() {\n        return {\n            /**\n             * Select analytics events to listen to for events.\n             */\n            get event() {\n                return new analytics.AnalyticsEventBuilder(() => null, {});\n            },\n        };\n    }\n    get storage() {\n        return {\n            /**\n             * The optional bucket function allows you to choose which buckets' events to handle.\n             * This step can be bypassed by calling object() directly, which will use the default\n             * Cloud Storage for Firebase bucket.\n             */\n            get bucket() {\n                return new storage.BucketBuilder(() => null, {}).object();\n            },\n            /**\n             * Handle events related to Cloud Storage objects.\n             */\n            get object() {\n                return new storage.ObjectBuilder(() => null, {});\n            },\n        };\n    }\n    get pubsub() {\n        return {\n            /**\n             * Select Cloud Pub/Sub topic to listen to.\n             */\n            get topic() {\n                return new pubsub.TopicBuilder(() => null, {});\n            },\n            /**\n             * Handle periodic events triggered by Cloud Scheduler.\n             */\n            get schedule() {\n                return new pubsub.ScheduleBuilder(() => null, {});\n            },\n        };\n    }\n    get auth() {\n        return {\n            /**\n             * Handle events related to Firebase authentication users.\n             */\n            get user() {\n                return new auth.UserBuilder(() => null, {});\n            },\n        };\n    }\n    get testLab() {\n        /** Handle events related to Test Lab test matrices. */\n        return {\n            get testMatrix() {\n                return new testLab.TestMatrixBuilder(() => null, {});\n            },\n        };\n    }\n}\nexports.HandlerBuilder = HandlerBuilder;\nexports.handler = new HandlerBuilder();\n"]},"metadata":{},"sourceType":"script"}