{"ast":null,"code":"import { mutate } from './use-swr';\nimport hash from './libs/hash';\nexport default class Cache {\n  constructor(initialData = {}) {\n    this.__cache = new Map(Object.entries(initialData));\n    this.__listeners = [];\n  }\n\n  get(key) {\n    const [_key] = this.serializeKey(key);\n    return this.__cache.get(_key);\n  }\n\n  set(key, value, shouldNotify = true) {\n    const [_key] = this.serializeKey(key);\n\n    this.__cache.set(_key, value);\n\n    if (shouldNotify) mutate(key, value, false);\n    this.notify();\n  }\n\n  keys() {\n    return Array.from(this.__cache.keys());\n  }\n\n  has(key) {\n    const [_key] = this.serializeKey(key);\n    return this.__cache.has(_key);\n  }\n\n  clear(shouldNotify = true) {\n    if (shouldNotify) this.__cache.forEach(key => mutate(key, null, false));\n\n    this.__cache.clear();\n\n    this.notify();\n  }\n\n  delete(key, shouldNotify = true) {\n    const [_key] = this.serializeKey(key);\n    if (shouldNotify) mutate(key, null, false);\n\n    this.__cache.delete(_key);\n\n    this.notify();\n  } // TODO: introduce namespace for the cache\n\n\n  serializeKey(key) {\n    let args = null;\n\n    if (typeof key === 'function') {\n      try {\n        key = key();\n      } catch (err) {\n        // dependencies not ready\n        key = '';\n      }\n    }\n\n    if (Array.isArray(key)) {\n      // args array\n      args = key;\n      key = hash(key);\n    } else {\n      // convert null to ''\n      key = String(key || '');\n    }\n\n    const errorKey = key ? 'err@' + key : '';\n    return [key, args, errorKey];\n  }\n\n  subscribe(listener) {\n    if (typeof listener !== 'function') {\n      throw new Error('Expected the listener to be a function.');\n    }\n\n    let isSubscribed = true;\n\n    this.__listeners.push(listener);\n\n    return () => {\n      if (!isSubscribed) return;\n      isSubscribed = false;\n\n      const index = this.__listeners.indexOf(listener);\n\n      if (index > -1) {\n        this.__listeners[index] = this.__listeners[this.__listeners.length - 1];\n        this.__listeners.length--;\n      }\n    };\n  } // Notify Cache subscribers about a change in the cache\n\n\n  notify() {\n    for (let listener of this.__listeners) {\n      listener();\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/a3506/Documents/WebDev/Map/WebDev/covid_map/node_modules/swr/esm/cache.js"],"names":["mutate","hash","Cache","constructor","initialData","__cache","Map","Object","entries","__listeners","get","key","_key","serializeKey","set","value","shouldNotify","notify","keys","Array","from","has","clear","forEach","delete","args","err","isArray","String","errorKey","subscribe","listener","Error","isSubscribed","push","index","indexOf","length"],"mappings":"AAAA,SAASA,MAAT,QAAuB,WAAvB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,eAAe,MAAMC,KAAN,CAAY;AACvBC,EAAAA,WAAW,CAACC,WAAW,GAAG,EAAf,EAAmB;AAC1B,SAAKC,OAAL,GAAe,IAAIC,GAAJ,CAAQC,MAAM,CAACC,OAAP,CAAeJ,WAAf,CAAR,CAAf;AACA,SAAKK,WAAL,GAAmB,EAAnB;AACH;;AACDC,EAAAA,GAAG,CAACC,GAAD,EAAM;AACL,UAAM,CAACC,IAAD,IAAS,KAAKC,YAAL,CAAkBF,GAAlB,CAAf;AACA,WAAO,KAAKN,OAAL,CAAaK,GAAb,CAAiBE,IAAjB,CAAP;AACH;;AACDE,EAAAA,GAAG,CAACH,GAAD,EAAMI,KAAN,EAAaC,YAAY,GAAG,IAA5B,EAAkC;AACjC,UAAM,CAACJ,IAAD,IAAS,KAAKC,YAAL,CAAkBF,GAAlB,CAAf;;AACA,SAAKN,OAAL,CAAaS,GAAb,CAAiBF,IAAjB,EAAuBG,KAAvB;;AACA,QAAIC,YAAJ,EACIhB,MAAM,CAACW,GAAD,EAAMI,KAAN,EAAa,KAAb,CAAN;AACJ,SAAKE,MAAL;AACH;;AACDC,EAAAA,IAAI,GAAG;AACH,WAAOC,KAAK,CAACC,IAAN,CAAW,KAAKf,OAAL,CAAaa,IAAb,EAAX,CAAP;AACH;;AACDG,EAAAA,GAAG,CAACV,GAAD,EAAM;AACL,UAAM,CAACC,IAAD,IAAS,KAAKC,YAAL,CAAkBF,GAAlB,CAAf;AACA,WAAO,KAAKN,OAAL,CAAagB,GAAb,CAAiBT,IAAjB,CAAP;AACH;;AACDU,EAAAA,KAAK,CAACN,YAAY,GAAG,IAAhB,EAAsB;AACvB,QAAIA,YAAJ,EACI,KAAKX,OAAL,CAAakB,OAAb,CAAqBZ,GAAG,IAAIX,MAAM,CAACW,GAAD,EAAM,IAAN,EAAY,KAAZ,CAAlC;;AACJ,SAAKN,OAAL,CAAaiB,KAAb;;AACA,SAAKL,MAAL;AACH;;AACDO,EAAAA,MAAM,CAACb,GAAD,EAAMK,YAAY,GAAG,IAArB,EAA2B;AAC7B,UAAM,CAACJ,IAAD,IAAS,KAAKC,YAAL,CAAkBF,GAAlB,CAAf;AACA,QAAIK,YAAJ,EACIhB,MAAM,CAACW,GAAD,EAAM,IAAN,EAAY,KAAZ,CAAN;;AACJ,SAAKN,OAAL,CAAamB,MAAb,CAAoBZ,IAApB;;AACA,SAAKK,MAAL;AACH,GAnCsB,CAoCvB;;;AACAJ,EAAAA,YAAY,CAACF,GAAD,EAAM;AACd,QAAIc,IAAI,GAAG,IAAX;;AACA,QAAI,OAAOd,GAAP,KAAe,UAAnB,EAA+B;AAC3B,UAAI;AACAA,QAAAA,GAAG,GAAGA,GAAG,EAAT;AACH,OAFD,CAGA,OAAOe,GAAP,EAAY;AACR;AACAf,QAAAA,GAAG,GAAG,EAAN;AACH;AACJ;;AACD,QAAIQ,KAAK,CAACQ,OAAN,CAAchB,GAAd,CAAJ,EAAwB;AACpB;AACAc,MAAAA,IAAI,GAAGd,GAAP;AACAA,MAAAA,GAAG,GAAGV,IAAI,CAACU,GAAD,CAAV;AACH,KAJD,MAKK;AACD;AACAA,MAAAA,GAAG,GAAGiB,MAAM,CAACjB,GAAG,IAAI,EAAR,CAAZ;AACH;;AACD,UAAMkB,QAAQ,GAAGlB,GAAG,GAAG,SAASA,GAAZ,GAAkB,EAAtC;AACA,WAAO,CAACA,GAAD,EAAMc,IAAN,EAAYI,QAAZ,CAAP;AACH;;AACDC,EAAAA,SAAS,CAACC,QAAD,EAAW;AAChB,QAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;AAChC,YAAM,IAAIC,KAAJ,CAAU,yCAAV,CAAN;AACH;;AACD,QAAIC,YAAY,GAAG,IAAnB;;AACA,SAAKxB,WAAL,CAAiByB,IAAjB,CAAsBH,QAAtB;;AACA,WAAO,MAAM;AACT,UAAI,CAACE,YAAL,EACI;AACJA,MAAAA,YAAY,GAAG,KAAf;;AACA,YAAME,KAAK,GAAG,KAAK1B,WAAL,CAAiB2B,OAAjB,CAAyBL,QAAzB,CAAd;;AACA,UAAII,KAAK,GAAG,CAAC,CAAb,EAAgB;AACZ,aAAK1B,WAAL,CAAiB0B,KAAjB,IAA0B,KAAK1B,WAAL,CAAiB,KAAKA,WAAL,CAAiB4B,MAAjB,GAA0B,CAA3C,CAA1B;AACA,aAAK5B,WAAL,CAAiB4B,MAAjB;AACH;AACJ,KATD;AAUH,GA5EsB,CA6EvB;;;AACApB,EAAAA,MAAM,GAAG;AACL,SAAK,IAAIc,QAAT,IAAqB,KAAKtB,WAA1B,EAAuC;AACnCsB,MAAAA,QAAQ;AACX;AACJ;;AAlFsB","sourcesContent":["import { mutate } from './use-swr';\nimport hash from './libs/hash';\nexport default class Cache {\n    constructor(initialData = {}) {\n        this.__cache = new Map(Object.entries(initialData));\n        this.__listeners = [];\n    }\n    get(key) {\n        const [_key] = this.serializeKey(key);\n        return this.__cache.get(_key);\n    }\n    set(key, value, shouldNotify = true) {\n        const [_key] = this.serializeKey(key);\n        this.__cache.set(_key, value);\n        if (shouldNotify)\n            mutate(key, value, false);\n        this.notify();\n    }\n    keys() {\n        return Array.from(this.__cache.keys());\n    }\n    has(key) {\n        const [_key] = this.serializeKey(key);\n        return this.__cache.has(_key);\n    }\n    clear(shouldNotify = true) {\n        if (shouldNotify)\n            this.__cache.forEach(key => mutate(key, null, false));\n        this.__cache.clear();\n        this.notify();\n    }\n    delete(key, shouldNotify = true) {\n        const [_key] = this.serializeKey(key);\n        if (shouldNotify)\n            mutate(key, null, false);\n        this.__cache.delete(_key);\n        this.notify();\n    }\n    // TODO: introduce namespace for the cache\n    serializeKey(key) {\n        let args = null;\n        if (typeof key === 'function') {\n            try {\n                key = key();\n            }\n            catch (err) {\n                // dependencies not ready\n                key = '';\n            }\n        }\n        if (Array.isArray(key)) {\n            // args array\n            args = key;\n            key = hash(key);\n        }\n        else {\n            // convert null to ''\n            key = String(key || '');\n        }\n        const errorKey = key ? 'err@' + key : '';\n        return [key, args, errorKey];\n    }\n    subscribe(listener) {\n        if (typeof listener !== 'function') {\n            throw new Error('Expected the listener to be a function.');\n        }\n        let isSubscribed = true;\n        this.__listeners.push(listener);\n        return () => {\n            if (!isSubscribed)\n                return;\n            isSubscribed = false;\n            const index = this.__listeners.indexOf(listener);\n            if (index > -1) {\n                this.__listeners[index] = this.__listeners[this.__listeners.length - 1];\n                this.__listeners.length--;\n            }\n        };\n    }\n    // Notify Cache subscribers about a change in the cache\n    notify() {\n        for (let listener of this.__listeners) {\n            listener();\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}