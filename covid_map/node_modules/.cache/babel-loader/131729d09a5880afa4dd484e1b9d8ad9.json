{"ast":null,"code":"\"use strict\"; // The MIT License (MIT)\n//\n// Copyright (c) 2019 Firebase\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the 'Software'), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst _ = require(\"lodash\");\n\nconst cloud_functions_1 = require(\"../cloud-functions\");\n/** @internal */\n\n\nexports.PROVIDER = 'google.testing';\n/** @internal */\n\nexports.SERVICE = 'testing.googleapis.com';\n/** @internal */\n\nexports.TEST_MATRIX_COMPLETE_EVENT_TYPE = 'testMatrix.complete';\n/** Handle events related to Test Lab test matrices. */\n\nfunction testMatrix() {\n  return _testMatrixWithOpts({});\n}\n\nexports.testMatrix = testMatrix;\n/** @internal */\n\nfunction _testMatrixWithOpts(opts) {\n  return new TestMatrixBuilder(() => {\n    if (!process.env.GCLOUD_PROJECT) {\n      throw new Error('process.env.GCLOUD_PROJECT is not set.');\n    }\n\n    return 'projects/' + process.env.GCLOUD_PROJECT + '/testMatrices/{matrix}';\n  }, opts);\n}\n\nexports._testMatrixWithOpts = _testMatrixWithOpts;\n/** Builder used to create Cloud Functions for Test Lab test matrices events. */\n\nclass TestMatrixBuilder {\n  /** @internal */\n  constructor(triggerResource, options) {\n    this.triggerResource = triggerResource;\n    this.options = options;\n  }\n  /** Handle a TestMatrix that reached a final test state. */\n\n\n  onComplete(handler) {\n    const dataConstructor = raw => {\n      return new TestMatrix(raw.data);\n    };\n\n    return cloud_functions_1.makeCloudFunction({\n      provider: exports.PROVIDER,\n      eventType: exports.TEST_MATRIX_COMPLETE_EVENT_TYPE,\n      triggerResource: this.triggerResource,\n      service: exports.SERVICE,\n      dataConstructor,\n      handler,\n      options: this.options\n    });\n  }\n\n}\n\nexports.TestMatrixBuilder = TestMatrixBuilder;\n/** TestMatrix captures details about a test run. */\n\nclass TestMatrix {\n  /** @internal */\n  constructor(data) {\n    this.testMatrixId = data.testMatrixId;\n    this.createTime = data.timestamp;\n    this.state = data.state;\n    this.outcomeSummary = data.outcomeSummary;\n    this.invalidMatrixDetails = data.invalidMatrixDetails;\n    this.resultStorage = new ResultStorage(data.resultStorage);\n    this.clientInfo = new ClientInfo(data.clientInfo);\n  }\n\n}\n\nexports.TestMatrix = TestMatrix;\n/** Information about the client which invoked the test. */\n\nclass ClientInfo {\n  /** @internal */\n  constructor(data) {\n    this.name = _.get(data, 'name', '');\n    this.details = {};\n\n    _.forEach(_.get(data, 'clientInfoDetails'), detail => {\n      this.details[detail.key] = detail.value || '';\n    });\n  }\n\n}\n\nexports.ClientInfo = ClientInfo;\n/** Locations where the test results are stored. */\n\nclass ResultStorage {\n  /** @internal */\n  constructor(data) {\n    this.gcsPath = _.get(data, 'googleCloudStorage.gcsPath');\n    this.toolResultsHistoryId = _.get(data, 'toolResultsHistory.historyId');\n    this.toolResultsExecutionId = _.get(data, 'toolResultsExecution.executionId');\n    this.resultsUrl = _.get(data, 'resultsUrl');\n  }\n\n}\n\nexports.ResultStorage = ResultStorage;","map":{"version":3,"sources":["/Users/a3506/Documents/WebDev/Map/WebDev/covid_map/node_modules/firebase-functions/lib/providers/testLab.js"],"names":["Object","defineProperty","exports","value","_","require","cloud_functions_1","PROVIDER","SERVICE","TEST_MATRIX_COMPLETE_EVENT_TYPE","testMatrix","_testMatrixWithOpts","opts","TestMatrixBuilder","process","env","GCLOUD_PROJECT","Error","constructor","triggerResource","options","onComplete","handler","dataConstructor","raw","TestMatrix","data","makeCloudFunction","provider","eventType","service","testMatrixId","createTime","timestamp","state","outcomeSummary","invalidMatrixDetails","resultStorage","ResultStorage","clientInfo","ClientInfo","name","get","details","forEach","detail","key","gcsPath","toolResultsHistoryId","toolResultsExecutionId","resultsUrl"],"mappings":"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","sourcesContent":["\"use strict\";\n// The MIT License (MIT)\n//\n// Copyright (c) 2019 Firebase\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the 'Software'), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst _ = require(\"lodash\");\nconst cloud_functions_1 = require(\"../cloud-functions\");\n/** @internal */\nexports.PROVIDER = 'google.testing';\n/** @internal */\nexports.SERVICE = 'testing.googleapis.com';\n/** @internal */\nexports.TEST_MATRIX_COMPLETE_EVENT_TYPE = 'testMatrix.complete';\n/** Handle events related to Test Lab test matrices. */\nfunction testMatrix() {\n    return _testMatrixWithOpts({});\n}\nexports.testMatrix = testMatrix;\n/** @internal */\nfunction _testMatrixWithOpts(opts) {\n    return new TestMatrixBuilder(() => {\n        if (!process.env.GCLOUD_PROJECT) {\n            throw new Error('process.env.GCLOUD_PROJECT is not set.');\n        }\n        return 'projects/' + process.env.GCLOUD_PROJECT + '/testMatrices/{matrix}';\n    }, opts);\n}\nexports._testMatrixWithOpts = _testMatrixWithOpts;\n/** Builder used to create Cloud Functions for Test Lab test matrices events. */\nclass TestMatrixBuilder {\n    /** @internal */\n    constructor(triggerResource, options) {\n        this.triggerResource = triggerResource;\n        this.options = options;\n    }\n    /** Handle a TestMatrix that reached a final test state. */\n    onComplete(handler) {\n        const dataConstructor = (raw) => {\n            return new TestMatrix(raw.data);\n        };\n        return cloud_functions_1.makeCloudFunction({\n            provider: exports.PROVIDER,\n            eventType: exports.TEST_MATRIX_COMPLETE_EVENT_TYPE,\n            triggerResource: this.triggerResource,\n            service: exports.SERVICE,\n            dataConstructor,\n            handler,\n            options: this.options,\n        });\n    }\n}\nexports.TestMatrixBuilder = TestMatrixBuilder;\n/** TestMatrix captures details about a test run. */\nclass TestMatrix {\n    /** @internal */\n    constructor(data) {\n        this.testMatrixId = data.testMatrixId;\n        this.createTime = data.timestamp;\n        this.state = data.state;\n        this.outcomeSummary = data.outcomeSummary;\n        this.invalidMatrixDetails = data.invalidMatrixDetails;\n        this.resultStorage = new ResultStorage(data.resultStorage);\n        this.clientInfo = new ClientInfo(data.clientInfo);\n    }\n}\nexports.TestMatrix = TestMatrix;\n/** Information about the client which invoked the test. */\nclass ClientInfo {\n    /** @internal */\n    constructor(data) {\n        this.name = _.get(data, 'name', '');\n        this.details = {};\n        _.forEach(_.get(data, 'clientInfoDetails'), (detail) => {\n            this.details[detail.key] = detail.value || '';\n        });\n    }\n}\nexports.ClientInfo = ClientInfo;\n/** Locations where the test results are stored. */\nclass ResultStorage {\n    /** @internal */\n    constructor(data) {\n        this.gcsPath = _.get(data, 'googleCloudStorage.gcsPath');\n        this.toolResultsHistoryId = _.get(data, 'toolResultsHistory.historyId');\n        this.toolResultsExecutionId = _.get(data, 'toolResultsExecution.executionId');\n        this.resultsUrl = _.get(data, 'resultsUrl');\n    }\n}\nexports.ResultStorage = ResultStorage;\n"]},"metadata":{},"sourceType":"script"}