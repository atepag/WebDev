{"ast":null,"code":"\"use strict\"; // The MIT License (MIT)\n//\n// Copyright (c) 2017 Firebase\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst cloud_functions_1 = require(\"../cloud-functions\");\n\nconst config_1 = require(\"../config\");\n/** @hidden */\n\n\nexports.provider = 'google.storage';\n/** @hidden */\n\nexports.service = 'storage.googleapis.com';\n/**\n * Registers a Cloud Function scoped to a specific storage bucket.\n *\n * @param bucket Name of the bucket to which this Cloud Function is\n *   scoped.\n *\n * @return Storage bucket builder interface.\n */\n\nfunction bucket(bucket) {\n  return _bucketWithOptions({}, bucket);\n}\n\nexports.bucket = bucket;\n/**\n * Registers a Cloud Function scoped to the default storage bucket for the\n * project.\n *\n * @return Storage object builder interface.\n */\n\nfunction object() {\n  return _objectWithOptions({});\n}\n\nexports.object = object;\n/** @hidden */\n\nfunction _bucketWithOptions(options, bucket) {\n  const resourceGetter = () => {\n    bucket = bucket || config_1.firebaseConfig().storageBucket;\n\n    if (!bucket) {\n      throw new Error('Missing bucket name. If you are unit testing, please provide a bucket name' + ' through `functions.storage.bucket(bucketName)`, or set process.env.FIREBASE_CONFIG.');\n    }\n\n    if (!/^[a-z\\d][a-z\\d\\\\._-]{1,230}[a-z\\d]$/.test(bucket)) {\n      throw new Error(`Invalid bucket name ${bucket}`);\n    }\n\n    return `projects/_/buckets/${bucket}`;\n  };\n\n  return new BucketBuilder(resourceGetter, options);\n}\n\nexports._bucketWithOptions = _bucketWithOptions;\n/** @hidden */\n\nfunction _objectWithOptions(options) {\n  return _bucketWithOptions(options).object();\n}\n\nexports._objectWithOptions = _objectWithOptions;\n/**\n * The Google Cloud Storage bucket builder interface.\n *\n * Access via [`functions.storage.bucket()`](providers_storage_.html#bucket).\n */\n\nclass BucketBuilder {\n  /** @hidden */\n  constructor(triggerResource, options) {\n    this.triggerResource = triggerResource;\n    this.options = options;\n  }\n  /**\n   * Event handler which fires every time a Google Cloud Storage change occurs.\n   *\n   * @return Storage object builder interface scoped to the specified storage\n   *   bucket.\n   */\n\n\n  object() {\n    return new ObjectBuilder(this.triggerResource, this.options);\n  }\n\n}\n\nexports.BucketBuilder = BucketBuilder;\n/**\n * The Google Cloud Storage object builder interface.\n *\n * Access via [`functions.storage.object()`](providers_storage_.html#object).\n */\n\nclass ObjectBuilder {\n  /** @hidden */\n  constructor(triggerResource, options) {\n    this.triggerResource = triggerResource;\n    this.options = options;\n  }\n  /** @hidden */\n\n\n  onChange(handler) {\n    throw new Error('\"onChange\" is now deprecated, please use \"onArchive\", \"onDelete\", ' + '\"onFinalize\", or \"onMetadataUpdate\".');\n  }\n  /**\n   * Event handler sent only when a bucket has enabled object versioning.\n   * This event indicates that the live version of an object has become an\n   * archived version, either because it was archived or because it was\n   * overwritten by the upload of an object of the same name.\n   *\n   * @param handler Event handler which is run every time a Google Cloud Storage\n   *   archival occurs.\n   *\n   * @return A Cloud Function which you can export and deploy.\n   */\n\n\n  onArchive(handler) {\n    return this.onOperation(handler, 'object.archive');\n  }\n  /**\n   * Event handler which fires every time a Google Cloud Storage deletion occurs.\n   *\n   * Sent when an object has been permanently deleted. This includes objects\n   * that are overwritten or are deleted as part of the bucket's lifecycle\n   * configuration. For buckets with object versioning enabled, this is not\n   * sent when an object is archived, even if archival occurs\n   * via the `storage.objects.delete` method.\n   *\n   * @param handler Event handler which is run every time a Google Cloud Storage\n   *   deletion occurs.\n   *\n   * @return A Cloud Function which you can export and deploy.\n   */\n\n\n  onDelete(handler) {\n    return this.onOperation(handler, 'object.delete');\n  }\n  /**\n   * Event handler which fires every time a Google Cloud Storage object\n   * creation occurs.\n   *\n   * Sent when a new object (or a new generation of an existing object)\n   * is successfully created in the bucket. This includes copying or rewriting\n   * an existing object. A failed upload does not trigger this event.\n   *\n   * @param handler Event handler which is run every time a Google Cloud Storage\n   *   object creation occurs.\n   *\n   * @return A Cloud Function which you can export and deploy.\n   */\n\n\n  onFinalize(handler) {\n    return this.onOperation(handler, 'object.finalize');\n  }\n  /**\n   * Event handler which fires every time the metadata of an existing object\n   * changes.\n   *\n   * @param handler Event handler which is run every time a Google Cloud Storage\n   *   metadata update occurs.\n   *\n   * @return A Cloud Function which you can export and deploy.\n   */\n\n\n  onMetadataUpdate(handler) {\n    return this.onOperation(handler, 'object.metadataUpdate');\n  }\n  /** @hidden */\n\n\n  onOperation(handler, eventType) {\n    return cloud_functions_1.makeCloudFunction({\n      handler,\n      provider: exports.provider,\n      service: exports.service,\n      eventType,\n      triggerResource: this.triggerResource,\n      options: this.options\n    });\n  }\n\n}\n\nexports.ObjectBuilder = ObjectBuilder;","map":{"version":3,"sources":["/Users/a3506/Documents/WebDev/Map/WebDev/covid_map/node_modules/firebase-functions/lib/providers/storage.js"],"names":["Object","defineProperty","exports","value","cloud_functions_1","require","config_1","provider","service","bucket","_bucketWithOptions","object","_objectWithOptions","options","resourceGetter","firebaseConfig","storageBucket","Error","test","BucketBuilder","constructor","triggerResource","ObjectBuilder","onChange","handler","onArchive","onOperation","onDelete","onFinalize","onMetadataUpdate","eventType","makeCloudFunction"],"mappings":"AAAA,a,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,iBAAiB,GAAGC,OAAO,CAAC,oBAAD,CAAjC;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,WAAD,CAAxB;AACA;;;AACAH,OAAO,CAACK,QAAR,GAAmB,gBAAnB;AACA;;AACAL,OAAO,CAACM,OAAR,GAAkB,wBAAlB;AACA;;;;;;;;;AAQA,SAASC,MAAT,CAAgBA,MAAhB,EAAwB;AACpB,SAAOC,kBAAkB,CAAC,EAAD,EAAKD,MAAL,CAAzB;AACH;;AACDP,OAAO,CAACO,MAAR,GAAiBA,MAAjB;AACA;;;;;;;AAMA,SAASE,MAAT,GAAkB;AACd,SAAOC,kBAAkB,CAAC,EAAD,CAAzB;AACH;;AACDV,OAAO,CAACS,MAAR,GAAiBA,MAAjB;AACA;;AACA,SAASD,kBAAT,CAA4BG,OAA5B,EAAqCJ,MAArC,EAA6C;AACzC,QAAMK,cAAc,GAAG,MAAM;AACzBL,IAAAA,MAAM,GAAGA,MAAM,IAAIH,QAAQ,CAACS,cAAT,GAA0BC,aAA7C;;AACA,QAAI,CAACP,MAAL,EAAa;AACT,YAAM,IAAIQ,KAAJ,CAAU,+EACZ,sFADE,CAAN;AAEH;;AACD,QAAI,CAAC,sCAAsCC,IAAtC,CAA2CT,MAA3C,CAAL,EAAyD;AACrD,YAAM,IAAIQ,KAAJ,CAAW,uBAAsBR,MAAO,EAAxC,CAAN;AACH;;AACD,WAAQ,sBAAqBA,MAAO,EAApC;AACH,GAVD;;AAWA,SAAO,IAAIU,aAAJ,CAAkBL,cAAlB,EAAkCD,OAAlC,CAAP;AACH;;AACDX,OAAO,CAACQ,kBAAR,GAA6BA,kBAA7B;AACA;;AACA,SAASE,kBAAT,CAA4BC,OAA5B,EAAqC;AACjC,SAAOH,kBAAkB,CAACG,OAAD,CAAlB,CAA4BF,MAA5B,EAAP;AACH;;AACDT,OAAO,CAACU,kBAAR,GAA6BA,kBAA7B;AACA;;;;;;AAKA,MAAMO,aAAN,CAAoB;AAChB;AACAC,EAAAA,WAAW,CAACC,eAAD,EAAkBR,OAAlB,EAA2B;AAClC,SAAKQ,eAAL,GAAuBA,eAAvB;AACA,SAAKR,OAAL,GAAeA,OAAf;AACH;AACD;;;;;;;;AAMAF,EAAAA,MAAM,GAAG;AACL,WAAO,IAAIW,aAAJ,CAAkB,KAAKD,eAAvB,EAAwC,KAAKR,OAA7C,CAAP;AACH;;AAde;;AAgBpBX,OAAO,CAACiB,aAAR,GAAwBA,aAAxB;AACA;;;;;;AAKA,MAAMG,aAAN,CAAoB;AAChB;AACAF,EAAAA,WAAW,CAACC,eAAD,EAAkBR,OAAlB,EAA2B;AAClC,SAAKQ,eAAL,GAAuBA,eAAvB;AACA,SAAKR,OAAL,GAAeA,OAAf;AACH;AACD;;;AACAU,EAAAA,QAAQ,CAACC,OAAD,EAAU;AACd,UAAM,IAAIP,KAAJ,CAAU,uEACZ,sCADE,CAAN;AAEH;AACD;;;;;;;;;;;;;AAWAQ,EAAAA,SAAS,CAACD,OAAD,EAAU;AACf,WAAO,KAAKE,WAAL,CAAiBF,OAAjB,EAA0B,gBAA1B,CAAP;AACH;AACD;;;;;;;;;;;;;;;;AAcAG,EAAAA,QAAQ,CAACH,OAAD,EAAU;AACd,WAAO,KAAKE,WAAL,CAAiBF,OAAjB,EAA0B,eAA1B,CAAP;AACH;AACD;;;;;;;;;;;;;;;AAaAI,EAAAA,UAAU,CAACJ,OAAD,EAAU;AAChB,WAAO,KAAKE,WAAL,CAAiBF,OAAjB,EAA0B,iBAA1B,CAAP;AACH;AACD;;;;;;;;;;;AASAK,EAAAA,gBAAgB,CAACL,OAAD,EAAU;AACtB,WAAO,KAAKE,WAAL,CAAiBF,OAAjB,EAA0B,uBAA1B,CAAP;AACH;AACD;;;AACAE,EAAAA,WAAW,CAACF,OAAD,EAAUM,SAAV,EAAqB;AAC5B,WAAO1B,iBAAiB,CAAC2B,iBAAlB,CAAoC;AACvCP,MAAAA,OADuC;AAEvCjB,MAAAA,QAAQ,EAAEL,OAAO,CAACK,QAFqB;AAGvCC,MAAAA,OAAO,EAAEN,OAAO,CAACM,OAHsB;AAIvCsB,MAAAA,SAJuC;AAKvCT,MAAAA,eAAe,EAAE,KAAKA,eALiB;AAMvCR,MAAAA,OAAO,EAAE,KAAKA;AANyB,KAApC,CAAP;AAQH;;AAhFe;;AAkFpBX,OAAO,CAACoB,aAAR,GAAwBA,aAAxB","sourcesContent":["\"use strict\";\n// The MIT License (MIT)\n//\n// Copyright (c) 2017 Firebase\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst cloud_functions_1 = require(\"../cloud-functions\");\nconst config_1 = require(\"../config\");\n/** @hidden */\nexports.provider = 'google.storage';\n/** @hidden */\nexports.service = 'storage.googleapis.com';\n/**\n * Registers a Cloud Function scoped to a specific storage bucket.\n *\n * @param bucket Name of the bucket to which this Cloud Function is\n *   scoped.\n *\n * @return Storage bucket builder interface.\n */\nfunction bucket(bucket) {\n    return _bucketWithOptions({}, bucket);\n}\nexports.bucket = bucket;\n/**\n * Registers a Cloud Function scoped to the default storage bucket for the\n * project.\n *\n * @return Storage object builder interface.\n */\nfunction object() {\n    return _objectWithOptions({});\n}\nexports.object = object;\n/** @hidden */\nfunction _bucketWithOptions(options, bucket) {\n    const resourceGetter = () => {\n        bucket = bucket || config_1.firebaseConfig().storageBucket;\n        if (!bucket) {\n            throw new Error('Missing bucket name. If you are unit testing, please provide a bucket name' +\n                ' through `functions.storage.bucket(bucketName)`, or set process.env.FIREBASE_CONFIG.');\n        }\n        if (!/^[a-z\\d][a-z\\d\\\\._-]{1,230}[a-z\\d]$/.test(bucket)) {\n            throw new Error(`Invalid bucket name ${bucket}`);\n        }\n        return `projects/_/buckets/${bucket}`;\n    };\n    return new BucketBuilder(resourceGetter, options);\n}\nexports._bucketWithOptions = _bucketWithOptions;\n/** @hidden */\nfunction _objectWithOptions(options) {\n    return _bucketWithOptions(options).object();\n}\nexports._objectWithOptions = _objectWithOptions;\n/**\n * The Google Cloud Storage bucket builder interface.\n *\n * Access via [`functions.storage.bucket()`](providers_storage_.html#bucket).\n */\nclass BucketBuilder {\n    /** @hidden */\n    constructor(triggerResource, options) {\n        this.triggerResource = triggerResource;\n        this.options = options;\n    }\n    /**\n     * Event handler which fires every time a Google Cloud Storage change occurs.\n     *\n     * @return Storage object builder interface scoped to the specified storage\n     *   bucket.\n     */\n    object() {\n        return new ObjectBuilder(this.triggerResource, this.options);\n    }\n}\nexports.BucketBuilder = BucketBuilder;\n/**\n * The Google Cloud Storage object builder interface.\n *\n * Access via [`functions.storage.object()`](providers_storage_.html#object).\n */\nclass ObjectBuilder {\n    /** @hidden */\n    constructor(triggerResource, options) {\n        this.triggerResource = triggerResource;\n        this.options = options;\n    }\n    /** @hidden */\n    onChange(handler) {\n        throw new Error('\"onChange\" is now deprecated, please use \"onArchive\", \"onDelete\", ' +\n            '\"onFinalize\", or \"onMetadataUpdate\".');\n    }\n    /**\n     * Event handler sent only when a bucket has enabled object versioning.\n     * This event indicates that the live version of an object has become an\n     * archived version, either because it was archived or because it was\n     * overwritten by the upload of an object of the same name.\n     *\n     * @param handler Event handler which is run every time a Google Cloud Storage\n     *   archival occurs.\n     *\n     * @return A Cloud Function which you can export and deploy.\n     */\n    onArchive(handler) {\n        return this.onOperation(handler, 'object.archive');\n    }\n    /**\n     * Event handler which fires every time a Google Cloud Storage deletion occurs.\n     *\n     * Sent when an object has been permanently deleted. This includes objects\n     * that are overwritten or are deleted as part of the bucket's lifecycle\n     * configuration. For buckets with object versioning enabled, this is not\n     * sent when an object is archived, even if archival occurs\n     * via the `storage.objects.delete` method.\n     *\n     * @param handler Event handler which is run every time a Google Cloud Storage\n     *   deletion occurs.\n     *\n     * @return A Cloud Function which you can export and deploy.\n     */\n    onDelete(handler) {\n        return this.onOperation(handler, 'object.delete');\n    }\n    /**\n     * Event handler which fires every time a Google Cloud Storage object\n     * creation occurs.\n     *\n     * Sent when a new object (or a new generation of an existing object)\n     * is successfully created in the bucket. This includes copying or rewriting\n     * an existing object. A failed upload does not trigger this event.\n     *\n     * @param handler Event handler which is run every time a Google Cloud Storage\n     *   object creation occurs.\n     *\n     * @return A Cloud Function which you can export and deploy.\n     */\n    onFinalize(handler) {\n        return this.onOperation(handler, 'object.finalize');\n    }\n    /**\n     * Event handler which fires every time the metadata of an existing object\n     * changes.\n     *\n     * @param handler Event handler which is run every time a Google Cloud Storage\n     *   metadata update occurs.\n     *\n     * @return A Cloud Function which you can export and deploy.\n     */\n    onMetadataUpdate(handler) {\n        return this.onOperation(handler, 'object.metadataUpdate');\n    }\n    /** @hidden */\n    onOperation(handler, eventType) {\n        return cloud_functions_1.makeCloudFunction({\n            handler,\n            provider: exports.provider,\n            service: exports.service,\n            eventType,\n            triggerResource: this.triggerResource,\n            options: this.options,\n        });\n    }\n}\nexports.ObjectBuilder = ObjectBuilder;\n"]},"metadata":{},"sourceType":"script"}