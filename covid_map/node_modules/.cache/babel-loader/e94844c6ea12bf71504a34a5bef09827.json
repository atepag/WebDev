{"ast":null,"code":"\"use strict\"; // The MIT License (MIT)\n//\n// Copyright (c) 2017 Firebase\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst firebase = require(\"firebase-admin\");\n\nconst _ = require(\"lodash\");\n\nconst path_1 = require(\"path\");\n\nconst apps_1 = require(\"../apps\");\n\nconst cloud_functions_1 = require(\"../cloud-functions\");\n\nconst encoder_1 = require(\"../encoder\");\n/** @hidden */\n\n\nexports.provider = 'google.firestore';\n/** @hidden */\n\nexports.service = 'firestore.googleapis.com';\n/** @hidden */\n\nexports.defaultDatabase = '(default)';\nlet firestoreInstance;\n/**\n * Select the Firestore document to listen to for events.\n * @param path Full database path to listen to. This includes the name of\n * the collection that the document is a part of. For example, if the\n * collection is named \"users\" and the document is named \"Ada\", then the\n * path is \"/users/Ada\".\n */\n\nfunction document(path) {\n  return _documentWithOptions(path, {});\n}\n\nexports.document = document;\n/** @hidden */\n// Multiple namespaces are not yet supported by Firestore.\n\nfunction namespace(namespace) {\n  return _namespaceWithOptions(namespace, {});\n}\n\nexports.namespace = namespace;\n/** @hidden */\n// Multiple databases are not yet supported by Firestore.\n\nfunction database(database) {\n  return _databaseWithOptions(database, {});\n}\n\nexports.database = database;\n/** @hidden */\n\nfunction _databaseWithOptions(database = exports.defaultDatabase, options) {\n  return new DatabaseBuilder(database, options);\n}\n\nexports._databaseWithOptions = _databaseWithOptions;\n/** @hidden */\n\nfunction _namespaceWithOptions(namespace, options) {\n  return _databaseWithOptions(exports.defaultDatabase, options).namespace(namespace);\n}\n\nexports._namespaceWithOptions = _namespaceWithOptions;\n/** @hidden */\n\nfunction _documentWithOptions(path, options) {\n  return _databaseWithOptions(exports.defaultDatabase, options).document(path);\n}\n\nexports._documentWithOptions = _documentWithOptions;\n\nclass DatabaseBuilder {\n  /** @hidden */\n  constructor(database, options) {\n    this.database = database;\n    this.options = options;\n  }\n\n  namespace(namespace) {\n    return new NamespaceBuilder(this.database, this.options, namespace);\n  }\n\n  document(path) {\n    return new NamespaceBuilder(this.database, this.options).document(path);\n  }\n\n}\n\nexports.DatabaseBuilder = DatabaseBuilder;\n\nclass NamespaceBuilder {\n  /** @hidden */\n  constructor(database, options, namespace) {\n    this.database = database;\n    this.options = options;\n    this.namespace = namespace;\n  }\n\n  document(path) {\n    return new DocumentBuilder(() => {\n      if (!process.env.GCLOUD_PROJECT) {\n        throw new Error('process.env.GCLOUD_PROJECT is not set.');\n      }\n\n      const database = path_1.posix.join('projects', process.env.GCLOUD_PROJECT, 'databases', this.database);\n      return path_1.posix.join(database, this.namespace ? `documents@${this.namespace}` : 'documents', path);\n    }, this.options);\n  }\n\n}\n\nexports.NamespaceBuilder = NamespaceBuilder;\n\nfunction _getValueProto(data, resource, valueFieldName) {\n  if (_.isEmpty(_.get(data, valueFieldName))) {\n    // Firestore#snapshot_ takes resource string instead of proto for a non-existent snapshot\n    return resource;\n  }\n\n  const proto = {\n    fields: _.get(data, [valueFieldName, 'fields'], {}),\n    createTime: encoder_1.dateToTimestampProto(_.get(data, [valueFieldName, 'createTime'])),\n    updateTime: encoder_1.dateToTimestampProto(_.get(data, [valueFieldName, 'updateTime'])),\n    name: _.get(data, [valueFieldName, 'name'], resource)\n  };\n  return proto;\n}\n/** @hidden */\n\n\nfunction snapshotConstructor(event) {\n  if (!firestoreInstance) {\n    firestoreInstance = firebase.firestore(apps_1.apps().admin);\n  }\n\n  const valueProto = _getValueProto(event.data, event.context.resource.name, 'value');\n\n  const readTime = encoder_1.dateToTimestampProto(_.get(event, 'data.value.readTime'));\n  return firestoreInstance.snapshot_(valueProto, readTime, 'json');\n}\n\nexports.snapshotConstructor = snapshotConstructor;\n/** @hidden */\n// TODO remove this function when wire format changes to new format\n\nfunction beforeSnapshotConstructor(event) {\n  if (!firestoreInstance) {\n    firestoreInstance = firebase.firestore(apps_1.apps().admin);\n  }\n\n  const oldValueProto = _getValueProto(event.data, event.context.resource.name, 'oldValue');\n\n  const oldReadTime = encoder_1.dateToTimestampProto(_.get(event, 'data.oldValue.readTime'));\n  return firestoreInstance.snapshot_(oldValueProto, oldReadTime, 'json');\n}\n\nexports.beforeSnapshotConstructor = beforeSnapshotConstructor;\n\nfunction changeConstructor(raw) {\n  return cloud_functions_1.Change.fromObjects(beforeSnapshotConstructor(raw), snapshotConstructor(raw));\n}\n\nclass DocumentBuilder {\n  /** @hidden */\n  constructor(triggerResource, options) {\n    this.triggerResource = triggerResource;\n    this.options = options; // TODO what validation do we want to do here?\n  }\n  /** Respond to all document writes (creates, updates, or deletes). */\n\n\n  onWrite(handler) {\n    return this.onOperation(handler, 'document.write', changeConstructor);\n  }\n  /** Respond only to document updates. */\n\n\n  onUpdate(handler) {\n    return this.onOperation(handler, 'document.update', changeConstructor);\n  }\n  /** Respond only to document creations. */\n\n\n  onCreate(handler) {\n    return this.onOperation(handler, 'document.create', snapshotConstructor);\n  }\n  /** Respond only to document deletions. */\n\n\n  onDelete(handler) {\n    return this.onOperation(handler, 'document.delete', beforeSnapshotConstructor);\n  }\n\n  onOperation(handler, eventType, dataConstructor) {\n    return cloud_functions_1.makeCloudFunction({\n      handler,\n      provider: exports.provider,\n      eventType,\n      service: exports.service,\n      triggerResource: this.triggerResource,\n      legacyEventType: `providers/cloud.firestore/eventTypes/${eventType}`,\n      dataConstructor,\n      options: this.options\n    });\n  }\n\n}\n\nexports.DocumentBuilder = DocumentBuilder;","map":{"version":3,"sources":["/Users/a3506/Documents/WebDev/Map/WebDev/covid_map/node_modules/firebase-functions/lib/providers/firestore.js"],"names":["Object","defineProperty","exports","value","firebase","require","_","path_1","apps_1","cloud_functions_1","encoder_1","provider","service","defaultDatabase","firestoreInstance","document","path","_documentWithOptions","namespace","_namespaceWithOptions","database","_databaseWithOptions","options","DatabaseBuilder","constructor","NamespaceBuilder","DocumentBuilder","process","env","GCLOUD_PROJECT","Error","posix","join","_getValueProto","data","resource","valueFieldName","isEmpty","get","proto","fields","createTime","dateToTimestampProto","updateTime","name","snapshotConstructor","event","firestore","apps","admin","valueProto","context","readTime","snapshot_","beforeSnapshotConstructor","oldValueProto","oldReadTime","changeConstructor","raw","Change","fromObjects","triggerResource","onWrite","handler","onOperation","onUpdate","onCreate","onDelete","eventType","dataConstructor","makeCloudFunction","legacyEventType"],"mappings":"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","sourcesContent":["\"use strict\";\n// The MIT License (MIT)\n//\n// Copyright (c) 2017 Firebase\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst firebase = require(\"firebase-admin\");\nconst _ = require(\"lodash\");\nconst path_1 = require(\"path\");\nconst apps_1 = require(\"../apps\");\nconst cloud_functions_1 = require(\"../cloud-functions\");\nconst encoder_1 = require(\"../encoder\");\n/** @hidden */\nexports.provider = 'google.firestore';\n/** @hidden */\nexports.service = 'firestore.googleapis.com';\n/** @hidden */\nexports.defaultDatabase = '(default)';\nlet firestoreInstance;\n/**\n * Select the Firestore document to listen to for events.\n * @param path Full database path to listen to. This includes the name of\n * the collection that the document is a part of. For example, if the\n * collection is named \"users\" and the document is named \"Ada\", then the\n * path is \"/users/Ada\".\n */\nfunction document(path) {\n    return _documentWithOptions(path, {});\n}\nexports.document = document;\n/** @hidden */\n// Multiple namespaces are not yet supported by Firestore.\nfunction namespace(namespace) {\n    return _namespaceWithOptions(namespace, {});\n}\nexports.namespace = namespace;\n/** @hidden */\n// Multiple databases are not yet supported by Firestore.\nfunction database(database) {\n    return _databaseWithOptions(database, {});\n}\nexports.database = database;\n/** @hidden */\nfunction _databaseWithOptions(database = exports.defaultDatabase, options) {\n    return new DatabaseBuilder(database, options);\n}\nexports._databaseWithOptions = _databaseWithOptions;\n/** @hidden */\nfunction _namespaceWithOptions(namespace, options) {\n    return _databaseWithOptions(exports.defaultDatabase, options).namespace(namespace);\n}\nexports._namespaceWithOptions = _namespaceWithOptions;\n/** @hidden */\nfunction _documentWithOptions(path, options) {\n    return _databaseWithOptions(exports.defaultDatabase, options).document(path);\n}\nexports._documentWithOptions = _documentWithOptions;\nclass DatabaseBuilder {\n    /** @hidden */\n    constructor(database, options) {\n        this.database = database;\n        this.options = options;\n    }\n    namespace(namespace) {\n        return new NamespaceBuilder(this.database, this.options, namespace);\n    }\n    document(path) {\n        return new NamespaceBuilder(this.database, this.options).document(path);\n    }\n}\nexports.DatabaseBuilder = DatabaseBuilder;\nclass NamespaceBuilder {\n    /** @hidden */\n    constructor(database, options, namespace) {\n        this.database = database;\n        this.options = options;\n        this.namespace = namespace;\n    }\n    document(path) {\n        return new DocumentBuilder(() => {\n            if (!process.env.GCLOUD_PROJECT) {\n                throw new Error('process.env.GCLOUD_PROJECT is not set.');\n            }\n            const database = path_1.posix.join('projects', process.env.GCLOUD_PROJECT, 'databases', this.database);\n            return path_1.posix.join(database, this.namespace ? `documents@${this.namespace}` : 'documents', path);\n        }, this.options);\n    }\n}\nexports.NamespaceBuilder = NamespaceBuilder;\nfunction _getValueProto(data, resource, valueFieldName) {\n    if (_.isEmpty(_.get(data, valueFieldName))) {\n        // Firestore#snapshot_ takes resource string instead of proto for a non-existent snapshot\n        return resource;\n    }\n    const proto = {\n        fields: _.get(data, [valueFieldName, 'fields'], {}),\n        createTime: encoder_1.dateToTimestampProto(_.get(data, [valueFieldName, 'createTime'])),\n        updateTime: encoder_1.dateToTimestampProto(_.get(data, [valueFieldName, 'updateTime'])),\n        name: _.get(data, [valueFieldName, 'name'], resource),\n    };\n    return proto;\n}\n/** @hidden */\nfunction snapshotConstructor(event) {\n    if (!firestoreInstance) {\n        firestoreInstance = firebase.firestore(apps_1.apps().admin);\n    }\n    const valueProto = _getValueProto(event.data, event.context.resource.name, 'value');\n    const readTime = encoder_1.dateToTimestampProto(_.get(event, 'data.value.readTime'));\n    return firestoreInstance.snapshot_(valueProto, readTime, 'json');\n}\nexports.snapshotConstructor = snapshotConstructor;\n/** @hidden */\n// TODO remove this function when wire format changes to new format\nfunction beforeSnapshotConstructor(event) {\n    if (!firestoreInstance) {\n        firestoreInstance = firebase.firestore(apps_1.apps().admin);\n    }\n    const oldValueProto = _getValueProto(event.data, event.context.resource.name, 'oldValue');\n    const oldReadTime = encoder_1.dateToTimestampProto(_.get(event, 'data.oldValue.readTime'));\n    return firestoreInstance.snapshot_(oldValueProto, oldReadTime, 'json');\n}\nexports.beforeSnapshotConstructor = beforeSnapshotConstructor;\nfunction changeConstructor(raw) {\n    return cloud_functions_1.Change.fromObjects(beforeSnapshotConstructor(raw), snapshotConstructor(raw));\n}\nclass DocumentBuilder {\n    /** @hidden */\n    constructor(triggerResource, options) {\n        this.triggerResource = triggerResource;\n        this.options = options;\n        // TODO what validation do we want to do here?\n    }\n    /** Respond to all document writes (creates, updates, or deletes). */\n    onWrite(handler) {\n        return this.onOperation(handler, 'document.write', changeConstructor);\n    }\n    /** Respond only to document updates. */\n    onUpdate(handler) {\n        return this.onOperation(handler, 'document.update', changeConstructor);\n    }\n    /** Respond only to document creations. */\n    onCreate(handler) {\n        return this.onOperation(handler, 'document.create', snapshotConstructor);\n    }\n    /** Respond only to document deletions. */\n    onDelete(handler) {\n        return this.onOperation(handler, 'document.delete', beforeSnapshotConstructor);\n    }\n    onOperation(handler, eventType, dataConstructor) {\n        return cloud_functions_1.makeCloudFunction({\n            handler,\n            provider: exports.provider,\n            eventType,\n            service: exports.service,\n            triggerResource: this.triggerResource,\n            legacyEventType: `providers/cloud.firestore/eventTypes/${eventType}`,\n            dataConstructor,\n            options: this.options,\n        });\n    }\n}\nexports.DocumentBuilder = DocumentBuilder;\n"]},"metadata":{},"sourceType":"script"}