{"ast":null,"code":"\"use strict\"; // The MIT License (MIT)\n//\n// Copyright (c) 2017 Firebase\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst cloud_functions_1 = require(\"../cloud-functions\");\n/** @hidden */\n\n\nexports.provider = 'google.firebase.crashlytics';\n/** @hidden */\n\nexports.service = 'fabric.io';\n/**\n * Registers a Cloud Function to handle Crashlytics issue events.\n *\n * @returns Crashlytics issue event builder interface.\n */\n\nfunction issue() {\n  return _issueWithOptions({});\n}\n\nexports.issue = issue;\n/** @hidden */\n\nfunction _issueWithOptions(options) {\n  return new IssueBuilder(() => {\n    if (!process.env.GCLOUD_PROJECT) {\n      throw new Error('process.env.GCLOUD_PROJECT is not set.');\n    }\n\n    return 'projects/' + process.env.GCLOUD_PROJECT;\n  }, options);\n}\n\nexports._issueWithOptions = _issueWithOptions;\n/** The Firebase Crashlytics issue builder interface. */\n\nclass IssueBuilder {\n  /** @hidden */\n  constructor(triggerResource, options) {\n    this.triggerResource = triggerResource;\n    this.options = options;\n  }\n  /** @hidden */\n\n\n  onNewDetected(handler) {\n    throw new Error('\"onNewDetected\" is now deprecated, please use \"onNew\"');\n  }\n  /**\n   * Event handler that fires every time a new issue occurs in a project.\n   *\n   * @param handler Event handler that fires every time a new issue event occurs.\n   * @example\n   * ```javascript\n   * exports.postOnNewIssue = functions.crashlytics.issue().onNew(event => {\n   *   const { data } = event;\n   *   issueId = data.issueId;\n   *   issueTitle =  data.issueTitle;\n   *   const slackMessage = ` There's a new issue (${issueId}) ` +\n   *       `in your app - ${issueTitle}`;\n   *   return notifySlack(slackMessage).then(() => {\n   *     console.log(`Posted new issue ${issueId} successfully to Slack`);\n   *   });\n   * });\n   * ```\n   */\n\n\n  onNew(handler) {\n    return this.onEvent(handler, 'issue.new');\n  }\n  /**\n   * Event handler that fires every time a regressed issue reoccurs in a project.\n   *\n   * @param handler Event handler that fires every time a regressed issue event occurs.\n   */\n\n\n  onRegressed(handler) {\n    return this.onEvent(handler, 'issue.regressed');\n  }\n  /**\n   * Event handler that fires every time a velocity alert occurs in a project.\n   *\n   * @param handler handler that fires every time a velocity alert issue event occurs.\n   */\n\n\n  onVelocityAlert(handler) {\n    return this.onEvent(handler, 'issue.velocityAlert');\n  }\n\n  onEvent(handler, eventType) {\n    return cloud_functions_1.makeCloudFunction({\n      handler,\n      provider: exports.provider,\n      eventType,\n      service: exports.service,\n      legacyEventType: `providers/firebase.crashlytics/eventTypes/${eventType}`,\n      triggerResource: this.triggerResource,\n      options: this.options\n    });\n  }\n\n}\n\nexports.IssueBuilder = IssueBuilder;","map":{"version":3,"sources":["/Users/a3506/Documents/WebDev/Map/WebDev/covid_map/node_modules/firebase-functions/lib/providers/crashlytics.js"],"names":["Object","defineProperty","exports","value","cloud_functions_1","require","provider","service","issue","_issueWithOptions","options","IssueBuilder","process","env","GCLOUD_PROJECT","Error","constructor","triggerResource","onNewDetected","handler","onNew","onEvent","onRegressed","onVelocityAlert","eventType","makeCloudFunction","legacyEventType"],"mappings":"AAAA,a,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,iBAAiB,GAAGC,OAAO,CAAC,oBAAD,CAAjC;AACA;;;AACAH,OAAO,CAACI,QAAR,GAAmB,6BAAnB;AACA;;AACAJ,OAAO,CAACK,OAAR,GAAkB,WAAlB;AACA;;;;;;AAKA,SAASC,KAAT,GAAiB;AACb,SAAOC,iBAAiB,CAAC,EAAD,CAAxB;AACH;;AACDP,OAAO,CAACM,KAAR,GAAgBA,KAAhB;AACA;;AACA,SAASC,iBAAT,CAA2BC,OAA3B,EAAoC;AAChC,SAAO,IAAIC,YAAJ,CAAiB,MAAM;AAC1B,QAAI,CAACC,OAAO,CAACC,GAAR,CAAYC,cAAjB,EAAiC;AAC7B,YAAM,IAAIC,KAAJ,CAAU,wCAAV,CAAN;AACH;;AACD,WAAO,cAAcH,OAAO,CAACC,GAAR,CAAYC,cAAjC;AACH,GALM,EAKJJ,OALI,CAAP;AAMH;;AACDR,OAAO,CAACO,iBAAR,GAA4BA,iBAA5B;AACA;;AACA,MAAME,YAAN,CAAmB;AACf;AACAK,EAAAA,WAAW,CAACC,eAAD,EAAkBP,OAAlB,EAA2B;AAClC,SAAKO,eAAL,GAAuBA,eAAvB;AACA,SAAKP,OAAL,GAAeA,OAAf;AACH;AACD;;;AACAQ,EAAAA,aAAa,CAACC,OAAD,EAAU;AACnB,UAAM,IAAIJ,KAAJ,CAAU,uDAAV,CAAN;AACH;AACD;;;;;;;;;;;;;;;;;;;;AAkBAK,EAAAA,KAAK,CAACD,OAAD,EAAU;AACX,WAAO,KAAKE,OAAL,CAAaF,OAAb,EAAsB,WAAtB,CAAP;AACH;AACD;;;;;;;AAKAG,EAAAA,WAAW,CAACH,OAAD,EAAU;AACjB,WAAO,KAAKE,OAAL,CAAaF,OAAb,EAAsB,iBAAtB,CAAP;AACH;AACD;;;;;;;AAKAI,EAAAA,eAAe,CAACJ,OAAD,EAAU;AACrB,WAAO,KAAKE,OAAL,CAAaF,OAAb,EAAsB,qBAAtB,CAAP;AACH;;AACDE,EAAAA,OAAO,CAACF,OAAD,EAAUK,SAAV,EAAqB;AACxB,WAAOpB,iBAAiB,CAACqB,iBAAlB,CAAoC;AACvCN,MAAAA,OADuC;AAEvCb,MAAAA,QAAQ,EAAEJ,OAAO,CAACI,QAFqB;AAGvCkB,MAAAA,SAHuC;AAIvCjB,MAAAA,OAAO,EAAEL,OAAO,CAACK,OAJsB;AAKvCmB,MAAAA,eAAe,EAAG,6CAA4CF,SAAU,EALjC;AAMvCP,MAAAA,eAAe,EAAE,KAAKA,eANiB;AAOvCP,MAAAA,OAAO,EAAE,KAAKA;AAPyB,KAApC,CAAP;AASH;;AAzDc;;AA2DnBR,OAAO,CAACS,YAAR,GAAuBA,YAAvB","sourcesContent":["\"use strict\";\n// The MIT License (MIT)\n//\n// Copyright (c) 2017 Firebase\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst cloud_functions_1 = require(\"../cloud-functions\");\n/** @hidden */\nexports.provider = 'google.firebase.crashlytics';\n/** @hidden */\nexports.service = 'fabric.io';\n/**\n * Registers a Cloud Function to handle Crashlytics issue events.\n *\n * @returns Crashlytics issue event builder interface.\n */\nfunction issue() {\n    return _issueWithOptions({});\n}\nexports.issue = issue;\n/** @hidden */\nfunction _issueWithOptions(options) {\n    return new IssueBuilder(() => {\n        if (!process.env.GCLOUD_PROJECT) {\n            throw new Error('process.env.GCLOUD_PROJECT is not set.');\n        }\n        return 'projects/' + process.env.GCLOUD_PROJECT;\n    }, options);\n}\nexports._issueWithOptions = _issueWithOptions;\n/** The Firebase Crashlytics issue builder interface. */\nclass IssueBuilder {\n    /** @hidden */\n    constructor(triggerResource, options) {\n        this.triggerResource = triggerResource;\n        this.options = options;\n    }\n    /** @hidden */\n    onNewDetected(handler) {\n        throw new Error('\"onNewDetected\" is now deprecated, please use \"onNew\"');\n    }\n    /**\n     * Event handler that fires every time a new issue occurs in a project.\n     *\n     * @param handler Event handler that fires every time a new issue event occurs.\n     * @example\n     * ```javascript\n     * exports.postOnNewIssue = functions.crashlytics.issue().onNew(event => {\n     *   const { data } = event;\n     *   issueId = data.issueId;\n     *   issueTitle =  data.issueTitle;\n     *   const slackMessage = ` There's a new issue (${issueId}) ` +\n     *       `in your app - ${issueTitle}`;\n     *   return notifySlack(slackMessage).then(() => {\n     *     console.log(`Posted new issue ${issueId} successfully to Slack`);\n     *   });\n     * });\n     * ```\n     */\n    onNew(handler) {\n        return this.onEvent(handler, 'issue.new');\n    }\n    /**\n     * Event handler that fires every time a regressed issue reoccurs in a project.\n     *\n     * @param handler Event handler that fires every time a regressed issue event occurs.\n     */\n    onRegressed(handler) {\n        return this.onEvent(handler, 'issue.regressed');\n    }\n    /**\n     * Event handler that fires every time a velocity alert occurs in a project.\n     *\n     * @param handler handler that fires every time a velocity alert issue event occurs.\n     */\n    onVelocityAlert(handler) {\n        return this.onEvent(handler, 'issue.velocityAlert');\n    }\n    onEvent(handler, eventType) {\n        return cloud_functions_1.makeCloudFunction({\n            handler,\n            provider: exports.provider,\n            eventType,\n            service: exports.service,\n            legacyEventType: `providers/firebase.crashlytics/eventTypes/${eventType}`,\n            triggerResource: this.triggerResource,\n            options: this.options,\n        });\n    }\n}\nexports.IssueBuilder = IssueBuilder;\n"]},"metadata":{},"sourceType":"script"}