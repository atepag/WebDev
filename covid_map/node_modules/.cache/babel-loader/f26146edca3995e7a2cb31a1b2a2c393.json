{"ast":null,"code":"\"use strict\"; // The MIT License (MIT)\n//\n// Copyright (c) 2017 Firebase\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst cors = require(\"cors\");\n\nconst _ = require(\"lodash\");\n\nconst apps_1 = require(\"../apps\");\n\nconst cloud_functions_1 = require(\"../cloud-functions\");\n/**\n * Handle HTTP requests.\n * @param handler A function that takes a request and response object,\n * same signature as an Express app.\n */\n\n\nfunction onRequest(handler) {\n  return _onRequestWithOptions(handler, {});\n}\n\nexports.onRequest = onRequest;\n/**\n * Declares a callable method for clients to call using a Firebase SDK.\n * @param handler A method that takes a data and context and returns a value.\n */\n\nfunction onCall(handler) {\n  return _onCallWithOptions(handler, {});\n}\n\nexports.onCall = onCall;\n/** @hidden */\n\nfunction _onRequestWithOptions(handler, options) {\n  // lets us add __trigger without altering handler:\n  const cloudFunction = (req, res) => {\n    return handler(req, res);\n  };\n\n  cloudFunction.__trigger = _.assign(cloud_functions_1.optionsToTrigger(options), {\n    httpsTrigger: {}\n  }); // TODO parse the options\n\n  return cloudFunction;\n}\n\nexports._onRequestWithOptions = _onRequestWithOptions;\n/**\n * Standard error codes and HTTP statuses for different ways a request can fail,\n * as defined by:\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n *\n * This map is used primarily to convert from a client error code string to\n * to the HTTP format error code string and status, and make sure it's in the\n * supported set.\n */\n\nconst errorCodeMap = {\n  ok: {\n    canonicalName: 'OK',\n    status: 200\n  },\n  cancelled: {\n    canonicalName: 'CANCELLED',\n    status: 499\n  },\n  unknown: {\n    canonicalName: 'UNKNOWN',\n    status: 500\n  },\n  'invalid-argument': {\n    canonicalName: 'INVALID_ARGUMENT',\n    status: 400\n  },\n  'deadline-exceeded': {\n    canonicalName: 'DEADLINE_EXCEEDED',\n    status: 504\n  },\n  'not-found': {\n    canonicalName: 'NOT_FOUND',\n    status: 404\n  },\n  'already-exists': {\n    canonicalName: 'ALREADY_EXISTS',\n    status: 409\n  },\n  'permission-denied': {\n    canonicalName: 'PERMISSION_DENIED',\n    status: 403\n  },\n  unauthenticated: {\n    canonicalName: 'UNAUTHENTICATED',\n    status: 401\n  },\n  'resource-exhausted': {\n    canonicalName: 'RESOURCE_EXHAUSTED',\n    status: 429\n  },\n  'failed-precondition': {\n    canonicalName: 'FAILED_PRECONDITION',\n    status: 400\n  },\n  aborted: {\n    canonicalName: 'ABORTED',\n    status: 409\n  },\n  'out-of-range': {\n    canonicalName: 'OUT_OF_RANGE',\n    status: 400\n  },\n  unimplemented: {\n    canonicalName: 'UNIMPLEMENTED',\n    status: 501\n  },\n  internal: {\n    canonicalName: 'INTERNAL',\n    status: 500\n  },\n  unavailable: {\n    canonicalName: 'UNAVAILABLE',\n    status: 503\n  },\n  'data-loss': {\n    canonicalName: 'DATA_LOSS',\n    status: 500\n  }\n};\n/**\n * An explicit error that can be thrown from a handler to send an error to the\n * client that called the function.\n */\n\nclass HttpsError extends Error {\n  constructor(code, message, details) {\n    super(message); // A sanity check for non-TypeScript consumers.\n\n    if (code in errorCodeMap === false) {\n      throw new Error(`Unknown error code: ${code}.`);\n    }\n\n    this.code = code;\n    this.details = details;\n    this.httpErrorCode = errorCodeMap[code];\n  }\n  /** @hidden */\n\n\n  toJSON() {\n    const {\n      details,\n      httpErrorCode: {\n        canonicalName: status\n      },\n      message\n    } = this;\n    return Object.assign(Object.assign({}, details === undefined ? {} : {\n      details\n    }), {\n      message,\n      status\n    });\n  }\n\n}\n\nexports.HttpsError = HttpsError; // Returns true if req is a properly formatted callable request.\n\nfunction isValidRequest(req) {\n  // The body must not be empty.\n  if (!req.body) {\n    console.warn('Request is missing body.');\n    return false;\n  } // Make sure it's a POST.\n\n\n  if (req.method !== 'POST') {\n    console.warn('Request has invalid method.', req.method);\n    return false;\n  } // Check that the Content-Type is JSON.\n\n\n  let contentType = (req.header('Content-Type') || '').toLowerCase(); // If it has a charset, just ignore it for now.\n\n  const semiColon = contentType.indexOf(';');\n\n  if (semiColon >= 0) {\n    contentType = contentType.substr(0, semiColon).trim();\n  }\n\n  if (contentType !== 'application/json') {\n    console.warn('Request has incorrect Content-Type.', contentType);\n    return false;\n  } // The body must have data.\n\n\n  if (_.isUndefined(req.body.data)) {\n    console.warn('Request body is missing data.', req.body);\n    return false;\n  } // TODO(klimt): Allow only whitelisted http headers.\n  // Verify that the body does not have any extra fields.\n\n\n  const extras = _.omit(req.body, 'data');\n\n  if (!_.isEmpty(extras)) {\n    console.warn('Request body has extra fields.', extras);\n    return false;\n  }\n\n  return true;\n}\n\nconst LONG_TYPE = 'type.googleapis.com/google.protobuf.Int64Value';\nconst UNSIGNED_LONG_TYPE = 'type.googleapis.com/google.protobuf.UInt64Value';\n/**\n * Encodes arbitrary data in our special format for JSON.\n * This is exposed only for testing.\n */\n\n/** @hidden */\n\nfunction encode(data) {\n  if (_.isNull(data) || _.isUndefined(data)) {\n    return null;\n  } // Oddly, _.isFinite(new Number(x)) always returns false, so unwrap Numbers.\n\n\n  if (data instanceof Number) {\n    data = data.valueOf();\n  }\n\n  if (_.isFinite(data)) {\n    // Any number in JS is safe to put directly in JSON and parse as a double\n    // without any loss of precision.\n    return data;\n  }\n\n  if (_.isBoolean(data)) {\n    return data;\n  }\n\n  if (_.isString(data)) {\n    return data;\n  }\n\n  if (_.isArray(data)) {\n    return _.map(data, encode);\n  }\n\n  if (_.isObject(data)) {\n    // It's not safe to use _.forEach, because the object might be 'array-like'\n    // if it has a key called 'length'. Note that this intentionally overrides\n    // any toJSON method that an object may have.\n    return _.mapValues(data, encode);\n  } // If we got this far, the data is not encodable.\n\n\n  console.error('Data cannot be encoded in JSON.', data);\n  throw new Error('Data cannot be encoded in JSON: ' + data);\n}\n\nexports.encode = encode;\n/**\n * Decodes our special format for JSON into native types.\n * This is exposed only for testing.\n */\n\n/** @hidden */\n\nfunction decode(data) {\n  if (data === null) {\n    return data;\n  }\n\n  if (data['@type']) {\n    switch (data['@type']) {\n      case LONG_TYPE: // Fall through and handle this the same as unsigned.\n\n      case UNSIGNED_LONG_TYPE:\n        {\n          // Technically, this could work return a valid number for malformed\n          // data if there was a number followed by garbage. But it's just not\n          // worth all the extra code to detect that case.\n          const value = parseFloat(data.value);\n\n          if (_.isNaN(value)) {\n            console.error('Data cannot be decoded from JSON.', data);\n            throw new Error('Data cannot be decoded from JSON: ' + data);\n          }\n\n          return value;\n        }\n\n      default:\n        {\n          console.error('Data cannot be decoded from JSON.', data);\n          throw new Error('Data cannot be decoded from JSON: ' + data);\n        }\n    }\n  }\n\n  if (_.isArray(data)) {\n    return _.map(data, decode);\n  }\n\n  if (_.isObject(data)) {\n    // It's not safe to use _.forEach, because the object might be 'array-like'\n    // if it has a key called 'length'.\n    return _.mapValues(data, decode);\n  } // Anything else is safe to return.\n\n\n  return data;\n}\n\nexports.decode = decode;\nconst corsHandler = cors({\n  origin: true,\n  methods: 'POST'\n});\n/** @hidden */\n\nfunction _onCallWithOptions(handler, options) {\n  const func = async (req, res) => {\n    try {\n      if (!isValidRequest(req)) {\n        console.error('Invalid request', req);\n        throw new HttpsError('invalid-argument', 'Bad Request');\n      }\n\n      const context = {\n        rawRequest: req\n      };\n      const authorization = req.header('Authorization');\n\n      if (authorization) {\n        const match = authorization.match(/^Bearer (.*)$/);\n\n        if (!match) {\n          throw new HttpsError('unauthenticated', 'Unauthenticated');\n        }\n\n        const idToken = match[1];\n\n        try {\n          const authToken = await apps_1.apps().admin.auth().verifyIdToken(idToken);\n          context.auth = {\n            uid: authToken.uid,\n            token: authToken\n          };\n        } catch (e) {\n          throw new HttpsError('unauthenticated', 'Unauthenticated');\n        }\n      }\n\n      const instanceId = req.header('Firebase-Instance-ID-Token');\n\n      if (instanceId) {\n        // Validating the token requires an http request, so we don't do it.\n        // If the user wants to use it for something, it will be validated then.\n        // Currently, the only real use case for this token is for sending\n        // pushes with FCM. In that case, the FCM APIs will validate the token.\n        context.instanceIdToken = req.header('Firebase-Instance-ID-Token');\n      }\n\n      const data = decode(req.body.data);\n      let result = await handler(data, context); // Encode the result as JSON to preserve types like Dates.\n\n      result = encode(result); // If there was some result, encode it in the body.\n\n      const responseBody = {\n        result\n      };\n      res.status(200).send(responseBody);\n    } catch (error) {\n      if (!(error instanceof HttpsError)) {\n        // This doesn't count as an 'explicit' error.\n        console.error('Unhandled error', error);\n        error = new HttpsError('internal', 'INTERNAL');\n      }\n\n      const {\n        status\n      } = error.httpErrorCode;\n      const body = {\n        error: error.toJSON()\n      };\n      res.status(status).send(body);\n    }\n  }; // Wrap the function with a cors handler.\n\n\n  const corsFunc = (req, res) => {\n    return corsHandler(req, res, () => func(req, res));\n  };\n\n  corsFunc.__trigger = _.assign(cloud_functions_1.optionsToTrigger(options), {\n    httpsTrigger: {},\n    labels: {\n      'deployment-callable': 'true'\n    }\n  });\n  corsFunc.run = handler;\n  return corsFunc;\n}\n\nexports._onCallWithOptions = _onCallWithOptions;","map":{"version":3,"sources":["/Users/a3506/Documents/WebDev/Map/WebDev/covid_map/node_modules/firebase-functions/lib/providers/https.js"],"names":["Object","defineProperty","exports","value","cors","require","_","apps_1","cloud_functions_1","onRequest","handler","_onRequestWithOptions","onCall","_onCallWithOptions","options","cloudFunction","req","res","__trigger","assign","optionsToTrigger","httpsTrigger","errorCodeMap","ok","canonicalName","status","cancelled","unknown","unauthenticated","aborted","unimplemented","internal","unavailable","HttpsError","Error","constructor","code","message","details","httpErrorCode","toJSON","undefined","isValidRequest","body","console","warn","method","contentType","header","toLowerCase","semiColon","indexOf","substr","trim","isUndefined","data","extras","omit","isEmpty","LONG_TYPE","UNSIGNED_LONG_TYPE","encode","isNull","Number","valueOf","isFinite","isBoolean","isString","isArray","map","isObject","mapValues","error","decode","parseFloat","isNaN","corsHandler","origin","methods","func","context","rawRequest","authorization","match","idToken","authToken","apps","admin","auth","verifyIdToken","uid","token","e","instanceId","instanceIdToken","result","responseBody","send","corsFunc","labels","run"],"mappings":"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","sourcesContent":["\"use strict\";\n// The MIT License (MIT)\n//\n// Copyright (c) 2017 Firebase\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst cors = require(\"cors\");\nconst _ = require(\"lodash\");\nconst apps_1 = require(\"../apps\");\nconst cloud_functions_1 = require(\"../cloud-functions\");\n/**\n * Handle HTTP requests.\n * @param handler A function that takes a request and response object,\n * same signature as an Express app.\n */\nfunction onRequest(handler) {\n    return _onRequestWithOptions(handler, {});\n}\nexports.onRequest = onRequest;\n/**\n * Declares a callable method for clients to call using a Firebase SDK.\n * @param handler A method that takes a data and context and returns a value.\n */\nfunction onCall(handler) {\n    return _onCallWithOptions(handler, {});\n}\nexports.onCall = onCall;\n/** @hidden */\nfunction _onRequestWithOptions(handler, options) {\n    // lets us add __trigger without altering handler:\n    const cloudFunction = (req, res) => {\n        return handler(req, res);\n    };\n    cloudFunction.__trigger = _.assign(cloud_functions_1.optionsToTrigger(options), {\n        httpsTrigger: {},\n    });\n    // TODO parse the options\n    return cloudFunction;\n}\nexports._onRequestWithOptions = _onRequestWithOptions;\n/**\n * Standard error codes and HTTP statuses for different ways a request can fail,\n * as defined by:\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n *\n * This map is used primarily to convert from a client error code string to\n * to the HTTP format error code string and status, and make sure it's in the\n * supported set.\n */\nconst errorCodeMap = {\n    ok: { canonicalName: 'OK', status: 200 },\n    cancelled: { canonicalName: 'CANCELLED', status: 499 },\n    unknown: { canonicalName: 'UNKNOWN', status: 500 },\n    'invalid-argument': { canonicalName: 'INVALID_ARGUMENT', status: 400 },\n    'deadline-exceeded': { canonicalName: 'DEADLINE_EXCEEDED', status: 504 },\n    'not-found': { canonicalName: 'NOT_FOUND', status: 404 },\n    'already-exists': { canonicalName: 'ALREADY_EXISTS', status: 409 },\n    'permission-denied': { canonicalName: 'PERMISSION_DENIED', status: 403 },\n    unauthenticated: { canonicalName: 'UNAUTHENTICATED', status: 401 },\n    'resource-exhausted': { canonicalName: 'RESOURCE_EXHAUSTED', status: 429 },\n    'failed-precondition': { canonicalName: 'FAILED_PRECONDITION', status: 400 },\n    aborted: { canonicalName: 'ABORTED', status: 409 },\n    'out-of-range': { canonicalName: 'OUT_OF_RANGE', status: 400 },\n    unimplemented: { canonicalName: 'UNIMPLEMENTED', status: 501 },\n    internal: { canonicalName: 'INTERNAL', status: 500 },\n    unavailable: { canonicalName: 'UNAVAILABLE', status: 503 },\n    'data-loss': { canonicalName: 'DATA_LOSS', status: 500 },\n};\n/**\n * An explicit error that can be thrown from a handler to send an error to the\n * client that called the function.\n */\nclass HttpsError extends Error {\n    constructor(code, message, details) {\n        super(message);\n        // A sanity check for non-TypeScript consumers.\n        if (code in errorCodeMap === false) {\n            throw new Error(`Unknown error code: ${code}.`);\n        }\n        this.code = code;\n        this.details = details;\n        this.httpErrorCode = errorCodeMap[code];\n    }\n    /** @hidden */\n    toJSON() {\n        const { details, httpErrorCode: { canonicalName: status }, message, } = this;\n        return Object.assign(Object.assign({}, (details === undefined ? {} : { details })), { message,\n            status });\n    }\n}\nexports.HttpsError = HttpsError;\n// Returns true if req is a properly formatted callable request.\nfunction isValidRequest(req) {\n    // The body must not be empty.\n    if (!req.body) {\n        console.warn('Request is missing body.');\n        return false;\n    }\n    // Make sure it's a POST.\n    if (req.method !== 'POST') {\n        console.warn('Request has invalid method.', req.method);\n        return false;\n    }\n    // Check that the Content-Type is JSON.\n    let contentType = (req.header('Content-Type') || '').toLowerCase();\n    // If it has a charset, just ignore it for now.\n    const semiColon = contentType.indexOf(';');\n    if (semiColon >= 0) {\n        contentType = contentType.substr(0, semiColon).trim();\n    }\n    if (contentType !== 'application/json') {\n        console.warn('Request has incorrect Content-Type.', contentType);\n        return false;\n    }\n    // The body must have data.\n    if (_.isUndefined(req.body.data)) {\n        console.warn('Request body is missing data.', req.body);\n        return false;\n    }\n    // TODO(klimt): Allow only whitelisted http headers.\n    // Verify that the body does not have any extra fields.\n    const extras = _.omit(req.body, 'data');\n    if (!_.isEmpty(extras)) {\n        console.warn('Request body has extra fields.', extras);\n        return false;\n    }\n    return true;\n}\nconst LONG_TYPE = 'type.googleapis.com/google.protobuf.Int64Value';\nconst UNSIGNED_LONG_TYPE = 'type.googleapis.com/google.protobuf.UInt64Value';\n/**\n * Encodes arbitrary data in our special format for JSON.\n * This is exposed only for testing.\n */\n/** @hidden */\nfunction encode(data) {\n    if (_.isNull(data) || _.isUndefined(data)) {\n        return null;\n    }\n    // Oddly, _.isFinite(new Number(x)) always returns false, so unwrap Numbers.\n    if (data instanceof Number) {\n        data = data.valueOf();\n    }\n    if (_.isFinite(data)) {\n        // Any number in JS is safe to put directly in JSON and parse as a double\n        // without any loss of precision.\n        return data;\n    }\n    if (_.isBoolean(data)) {\n        return data;\n    }\n    if (_.isString(data)) {\n        return data;\n    }\n    if (_.isArray(data)) {\n        return _.map(data, encode);\n    }\n    if (_.isObject(data)) {\n        // It's not safe to use _.forEach, because the object might be 'array-like'\n        // if it has a key called 'length'. Note that this intentionally overrides\n        // any toJSON method that an object may have.\n        return _.mapValues(data, encode);\n    }\n    // If we got this far, the data is not encodable.\n    console.error('Data cannot be encoded in JSON.', data);\n    throw new Error('Data cannot be encoded in JSON: ' + data);\n}\nexports.encode = encode;\n/**\n * Decodes our special format for JSON into native types.\n * This is exposed only for testing.\n */\n/** @hidden */\nfunction decode(data) {\n    if (data === null) {\n        return data;\n    }\n    if (data['@type']) {\n        switch (data['@type']) {\n            case LONG_TYPE:\n            // Fall through and handle this the same as unsigned.\n            case UNSIGNED_LONG_TYPE: {\n                // Technically, this could work return a valid number for malformed\n                // data if there was a number followed by garbage. But it's just not\n                // worth all the extra code to detect that case.\n                const value = parseFloat(data.value);\n                if (_.isNaN(value)) {\n                    console.error('Data cannot be decoded from JSON.', data);\n                    throw new Error('Data cannot be decoded from JSON: ' + data);\n                }\n                return value;\n            }\n            default: {\n                console.error('Data cannot be decoded from JSON.', data);\n                throw new Error('Data cannot be decoded from JSON: ' + data);\n            }\n        }\n    }\n    if (_.isArray(data)) {\n        return _.map(data, decode);\n    }\n    if (_.isObject(data)) {\n        // It's not safe to use _.forEach, because the object might be 'array-like'\n        // if it has a key called 'length'.\n        return _.mapValues(data, decode);\n    }\n    // Anything else is safe to return.\n    return data;\n}\nexports.decode = decode;\nconst corsHandler = cors({ origin: true, methods: 'POST' });\n/** @hidden */\nfunction _onCallWithOptions(handler, options) {\n    const func = async (req, res) => {\n        try {\n            if (!isValidRequest(req)) {\n                console.error('Invalid request', req);\n                throw new HttpsError('invalid-argument', 'Bad Request');\n            }\n            const context = { rawRequest: req };\n            const authorization = req.header('Authorization');\n            if (authorization) {\n                const match = authorization.match(/^Bearer (.*)$/);\n                if (!match) {\n                    throw new HttpsError('unauthenticated', 'Unauthenticated');\n                }\n                const idToken = match[1];\n                try {\n                    const authToken = await apps_1.apps()\n                        .admin.auth()\n                        .verifyIdToken(idToken);\n                    context.auth = {\n                        uid: authToken.uid,\n                        token: authToken,\n                    };\n                }\n                catch (e) {\n                    throw new HttpsError('unauthenticated', 'Unauthenticated');\n                }\n            }\n            const instanceId = req.header('Firebase-Instance-ID-Token');\n            if (instanceId) {\n                // Validating the token requires an http request, so we don't do it.\n                // If the user wants to use it for something, it will be validated then.\n                // Currently, the only real use case for this token is for sending\n                // pushes with FCM. In that case, the FCM APIs will validate the token.\n                context.instanceIdToken = req.header('Firebase-Instance-ID-Token');\n            }\n            const data = decode(req.body.data);\n            let result = await handler(data, context);\n            // Encode the result as JSON to preserve types like Dates.\n            result = encode(result);\n            // If there was some result, encode it in the body.\n            const responseBody = { result };\n            res.status(200).send(responseBody);\n        }\n        catch (error) {\n            if (!(error instanceof HttpsError)) {\n                // This doesn't count as an 'explicit' error.\n                console.error('Unhandled error', error);\n                error = new HttpsError('internal', 'INTERNAL');\n            }\n            const { status } = error.httpErrorCode;\n            const body = { error: error.toJSON() };\n            res.status(status).send(body);\n        }\n    };\n    // Wrap the function with a cors handler.\n    const corsFunc = (req, res) => {\n        return corsHandler(req, res, () => func(req, res));\n    };\n    corsFunc.__trigger = _.assign(cloud_functions_1.optionsToTrigger(options), {\n        httpsTrigger: {},\n        labels: { 'deployment-callable': 'true' },\n    });\n    corsFunc.run = handler;\n    return corsFunc;\n}\nexports._onCallWithOptions = _onCallWithOptions;\n"]},"metadata":{},"sourceType":"script"}