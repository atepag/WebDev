{"ast":null,"code":"\"use strict\"; // The MIT License (MIT)\n//\n// Copyright (c) 2017 Firebase\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst _ = require(\"lodash\");\n\nconst function_configuration_1 = require(\"./function-configuration\");\n\nconst analytics = require(\"./providers/analytics\");\n\nconst auth = require(\"./providers/auth\");\n\nconst crashlytics = require(\"./providers/crashlytics\");\n\nconst database = require(\"./providers/database\");\n\nconst firestore = require(\"./providers/firestore\");\n\nconst https = require(\"./providers/https\");\n\nconst pubsub = require(\"./providers/pubsub\");\n\nconst remoteConfig = require(\"./providers/remoteConfig\");\n\nconst storage = require(\"./providers/storage\");\n\nconst testLab = require(\"./providers/testLab\");\n/**\n * Assert that the runtime options passed in are valid.\n * @param runtimeOptions object containing memory and timeout information.\n * @throws { Error } Memory and TimeoutSeconds values must be valid.\n */\n\n\nfunction assertRuntimeOptionsValid(runtimeOptions) {\n  if (runtimeOptions.memory && !_.includes(function_configuration_1.VALID_MEMORY_OPTIONS, runtimeOptions.memory)) {\n    throw new Error(`The only valid memory allocation values are: ${function_configuration_1.VALID_MEMORY_OPTIONS.join(', ')}`);\n  }\n\n  if (runtimeOptions.timeoutSeconds > function_configuration_1.MAX_TIMEOUT_SECONDS || runtimeOptions.timeoutSeconds < 0) {\n    throw new Error(`TimeoutSeconds must be between 0 and ${function_configuration_1.MAX_TIMEOUT_SECONDS}`);\n  }\n\n  return true;\n}\n/**\n * Assert regions specified are valid.\n * @param regions list of regions.\n * @throws { Error } Regions must be in list of supported regions.\n */\n\n\nfunction assertRegionsAreValid(regions) {\n  if (!regions.length) {\n    throw new Error('You must specify at least one region');\n  }\n\n  if (_.difference(regions, function_configuration_1.SUPPORTED_REGIONS).length) {\n    throw new Error(`The only valid regions are: ${function_configuration_1.SUPPORTED_REGIONS.join(', ')}`);\n  }\n\n  return true;\n}\n/**\n * Configure the regions that the function is deployed to.\n * @param regions One of more region strings.\n * @example\n * functions.region('us-east1')\n * @example\n * functions.region('us-east1', 'us-central1')\n */\n\n\nfunction region(...regions) {\n  if (assertRegionsAreValid(regions)) {\n    return new FunctionBuilder({\n      regions\n    });\n  }\n}\n\nexports.region = region;\n/**\n * Configure runtime options for the function.\n * @param runtimeOptions Object with three optional fields:\n * 1. memory: amount of memory to allocate to the function, possible values\n *    are: '128MB', '256MB', '512MB', '1GB', and '2GB'.\n * 2. timeoutSeconds: timeout for the function in seconds, possible values are\n *    0 to 540.\n */\n\nfunction runWith(runtimeOptions) {\n  if (assertRuntimeOptionsValid(runtimeOptions)) {\n    return new FunctionBuilder(runtimeOptions);\n  }\n}\n\nexports.runWith = runWith;\n\nclass FunctionBuilder {\n  constructor(options) {\n    this.options = options;\n  }\n  /**\n   * Configure the regions that the function is deployed to.\n   * @param regions One or more region strings.\n   * @example\n   * functions.region('us-east1')\n   * @example\n   * functions.region('us-east1', 'us-central1')\n   */\n\n\n  region(...regions) {\n    if (assertRegionsAreValid(regions)) {\n      this.options.regions = regions;\n      return this;\n    }\n  }\n  /**\n   * Configure runtime options for the function.\n   * @param runtimeOptions Object with three optional fields:\n   * 1. memory: amount of memory to allocate to the function, possible values\n   *    are: '128MB', '256MB', '512MB', '1GB', and '2GB'.\n   * 2. timeoutSeconds: timeout for the function in seconds, possible values are\n   *    0 to 540.\n   */\n\n\n  runWith(runtimeOptions) {\n    if (assertRuntimeOptionsValid(runtimeOptions)) {\n      this.options = _.assign(this.options, runtimeOptions);\n      return this;\n    }\n  }\n\n  get https() {\n    return {\n      /**\n       * Handle HTTP requests.\n       * @param handler A function that takes a request and response object,\n       * same signature as an Express app.\n       */\n      onRequest: handler => https._onRequestWithOptions(handler, this.options),\n\n      /**\n       * Declares a callable method for clients to call using a Firebase SDK.\n       * @param handler A method that takes a data and context and returns a value.\n       */\n      onCall: handler => https._onCallWithOptions(handler, this.options)\n    };\n  }\n\n  get database() {\n    return {\n      /**\n       * Selects a database instance that will trigger the function. If omitted,\n       * will pick the default database for your project.\n       * @param instance The Realtime Database instance to use.\n       */\n      instance: instance => database._instanceWithOptions(instance, this.options),\n\n      /**\n       * Select Firebase Realtime Database Reference to listen to.\n       *\n       * This method behaves very similarly to the method of the same name in\n       * the client and Admin Firebase SDKs. Any change to the Database that\n       * affects the data at or below the provided `path` will fire an event in\n       * Cloud Functions.\n       *\n       * There are three important differences between listening to a Realtime\n       * Database event in Cloud Functions and using the Realtime Database in\n       * the client and Admin SDKs:\n       * 1. Cloud Functions allows wildcards in the `path` name. Any `path`\n       *    component in curly brackets (`{}`) is a wildcard that matches all\n       *    strings. The value that matched a certain invocation of a Cloud\n       *    Function is returned as part of the `context.params` object. For\n       *    example, `ref(\"messages/{messageId}\")` matches changes at\n       *    `/messages/message1` or `/messages/message2`, resulting in\n       *    `context.params.messageId` being set to `\"message1\"` or\n       *    `\"message2\"`, respectively.\n       * 2. Cloud Functions do not fire an event for data that already existed\n       *    before the Cloud Function was deployed.\n       * 3. Cloud Function events have access to more information, including\n       *    information about the user who triggered the Cloud Function.\n       * @param ref Path of the database to listen to.\n       */\n      ref: path => database._refWithOptions(path, this.options)\n    };\n  }\n\n  get firestore() {\n    return {\n      /**\n       * Select the Firestore document to listen to for events.\n       * @param path Full database path to listen to. This includes the name of\n       * the collection that the document is a part of. For example, if the\n       * collection is named \"users\" and the document is named \"Ada\", then the\n       * path is \"/users/Ada\".\n       */\n      document: path => firestore._documentWithOptions(path, this.options),\n\n      /** @hidden */\n      namespace: namespace => firestore._namespaceWithOptions(namespace, this.options),\n\n      /** @hidden */\n      database: database => firestore._databaseWithOptions(database, this.options)\n    };\n  }\n\n  get crashlytics() {\n    return {\n      /**\n       * Handle events related to Crashlytics issues. An issue in Crashlytics is\n       * an aggregation of crashes which have a shared root cause.\n       */\n      issue: () => crashlytics._issueWithOptions(this.options)\n    };\n  }\n\n  get analytics() {\n    return {\n      /**\n       * Select analytics events to listen to for events.\n       * @param analyticsEventType Name of the analytics event type.\n       */\n      event: analyticsEventType => analytics._eventWithOptions(analyticsEventType, this.options)\n    };\n  }\n\n  get remoteConfig() {\n    return {\n      /**\n       * Handle all updates (including rollbacks) that affect a Remote Config\n       * project.\n       * @param handler A function that takes the updated Remote Config template\n       * version metadata as an argument.\n       */\n      onUpdate: handler => remoteConfig._onUpdateWithOptions(handler, this.options)\n    };\n  }\n\n  get storage() {\n    return {\n      /**\n       * The optional bucket function allows you to choose which buckets' events\n       * to handle. This step can be bypassed by calling object() directly,\n       * which will use the default Cloud Storage for Firebase bucket.\n       * @param bucket Name of the Google Cloud Storage bucket to listen to.\n       */\n      bucket: bucket => storage._bucketWithOptions(this.options, bucket),\n\n      /**\n       * Handle events related to Cloud Storage objects.\n       */\n      object: () => storage._objectWithOptions(this.options)\n    };\n  }\n\n  get pubsub() {\n    return {\n      /**\n       * Select Cloud Pub/Sub topic to listen to.\n       * @param topic Name of Pub/Sub topic, must belong to the same project as\n       * the function.\n       */\n      topic: topic => pubsub._topicWithOptions(topic, this.options),\n      schedule: schedule => pubsub._scheduleWithOptions(schedule, this.options)\n    };\n  }\n\n  get auth() {\n    return {\n      /**\n       * Handle events related to Firebase authentication users.\n       */\n      user: () => auth._userWithOptions(this.options)\n    };\n  }\n\n  get testLab() {\n    return {\n      /**\n       * Handle events related to Test Lab test matrices.\n       */\n      testMatrix: () => testLab._testMatrixWithOpts(this.options)\n    };\n  }\n\n}\n\nexports.FunctionBuilder = FunctionBuilder;","map":{"version":3,"sources":["/Users/a3506/Documents/WebDev/Map/WebDev/covid_map/node_modules/firebase-functions/lib/function-builder.js"],"names":["Object","defineProperty","exports","value","_","require","function_configuration_1","analytics","auth","crashlytics","database","firestore","https","pubsub","remoteConfig","storage","testLab","assertRuntimeOptionsValid","runtimeOptions","memory","includes","VALID_MEMORY_OPTIONS","Error","join","timeoutSeconds","MAX_TIMEOUT_SECONDS","assertRegionsAreValid","regions","length","difference","SUPPORTED_REGIONS","region","FunctionBuilder","runWith","constructor","options","assign","onRequest","handler","_onRequestWithOptions","onCall","_onCallWithOptions","instance","_instanceWithOptions","ref","path","_refWithOptions","document","_documentWithOptions","namespace","_namespaceWithOptions","_databaseWithOptions","issue","_issueWithOptions","event","analyticsEventType","_eventWithOptions","onUpdate","_onUpdateWithOptions","bucket","_bucketWithOptions","object","_objectWithOptions","topic","_topicWithOptions","schedule","_scheduleWithOptions","user","_userWithOptions","testMatrix","_testMatrixWithOpts"],"mappings":"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","sourcesContent":["\"use strict\";\n// The MIT License (MIT)\n//\n// Copyright (c) 2017 Firebase\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst _ = require(\"lodash\");\nconst function_configuration_1 = require(\"./function-configuration\");\nconst analytics = require(\"./providers/analytics\");\nconst auth = require(\"./providers/auth\");\nconst crashlytics = require(\"./providers/crashlytics\");\nconst database = require(\"./providers/database\");\nconst firestore = require(\"./providers/firestore\");\nconst https = require(\"./providers/https\");\nconst pubsub = require(\"./providers/pubsub\");\nconst remoteConfig = require(\"./providers/remoteConfig\");\nconst storage = require(\"./providers/storage\");\nconst testLab = require(\"./providers/testLab\");\n/**\n * Assert that the runtime options passed in are valid.\n * @param runtimeOptions object containing memory and timeout information.\n * @throws { Error } Memory and TimeoutSeconds values must be valid.\n */\nfunction assertRuntimeOptionsValid(runtimeOptions) {\n    if (runtimeOptions.memory &&\n        !_.includes(function_configuration_1.VALID_MEMORY_OPTIONS, runtimeOptions.memory)) {\n        throw new Error(`The only valid memory allocation values are: ${function_configuration_1.VALID_MEMORY_OPTIONS.join(', ')}`);\n    }\n    if (runtimeOptions.timeoutSeconds > function_configuration_1.MAX_TIMEOUT_SECONDS ||\n        runtimeOptions.timeoutSeconds < 0) {\n        throw new Error(`TimeoutSeconds must be between 0 and ${function_configuration_1.MAX_TIMEOUT_SECONDS}`);\n    }\n    return true;\n}\n/**\n * Assert regions specified are valid.\n * @param regions list of regions.\n * @throws { Error } Regions must be in list of supported regions.\n */\nfunction assertRegionsAreValid(regions) {\n    if (!regions.length) {\n        throw new Error('You must specify at least one region');\n    }\n    if (_.difference(regions, function_configuration_1.SUPPORTED_REGIONS).length) {\n        throw new Error(`The only valid regions are: ${function_configuration_1.SUPPORTED_REGIONS.join(', ')}`);\n    }\n    return true;\n}\n/**\n * Configure the regions that the function is deployed to.\n * @param regions One of more region strings.\n * @example\n * functions.region('us-east1')\n * @example\n * functions.region('us-east1', 'us-central1')\n */\nfunction region(...regions) {\n    if (assertRegionsAreValid(regions)) {\n        return new FunctionBuilder({ regions });\n    }\n}\nexports.region = region;\n/**\n * Configure runtime options for the function.\n * @param runtimeOptions Object with three optional fields:\n * 1. memory: amount of memory to allocate to the function, possible values\n *    are: '128MB', '256MB', '512MB', '1GB', and '2GB'.\n * 2. timeoutSeconds: timeout for the function in seconds, possible values are\n *    0 to 540.\n */\nfunction runWith(runtimeOptions) {\n    if (assertRuntimeOptionsValid(runtimeOptions)) {\n        return new FunctionBuilder(runtimeOptions);\n    }\n}\nexports.runWith = runWith;\nclass FunctionBuilder {\n    constructor(options) {\n        this.options = options;\n    }\n    /**\n     * Configure the regions that the function is deployed to.\n     * @param regions One or more region strings.\n     * @example\n     * functions.region('us-east1')\n     * @example\n     * functions.region('us-east1', 'us-central1')\n     */\n    region(...regions) {\n        if (assertRegionsAreValid(regions)) {\n            this.options.regions = regions;\n            return this;\n        }\n    }\n    /**\n     * Configure runtime options for the function.\n     * @param runtimeOptions Object with three optional fields:\n     * 1. memory: amount of memory to allocate to the function, possible values\n     *    are: '128MB', '256MB', '512MB', '1GB', and '2GB'.\n     * 2. timeoutSeconds: timeout for the function in seconds, possible values are\n     *    0 to 540.\n     */\n    runWith(runtimeOptions) {\n        if (assertRuntimeOptionsValid(runtimeOptions)) {\n            this.options = _.assign(this.options, runtimeOptions);\n            return this;\n        }\n    }\n    get https() {\n        return {\n            /**\n             * Handle HTTP requests.\n             * @param handler A function that takes a request and response object,\n             * same signature as an Express app.\n             */\n            onRequest: (handler) => https._onRequestWithOptions(handler, this.options),\n            /**\n             * Declares a callable method for clients to call using a Firebase SDK.\n             * @param handler A method that takes a data and context and returns a value.\n             */\n            onCall: (handler) => https._onCallWithOptions(handler, this.options),\n        };\n    }\n    get database() {\n        return {\n            /**\n             * Selects a database instance that will trigger the function. If omitted,\n             * will pick the default database for your project.\n             * @param instance The Realtime Database instance to use.\n             */\n            instance: (instance) => database._instanceWithOptions(instance, this.options),\n            /**\n             * Select Firebase Realtime Database Reference to listen to.\n             *\n             * This method behaves very similarly to the method of the same name in\n             * the client and Admin Firebase SDKs. Any change to the Database that\n             * affects the data at or below the provided `path` will fire an event in\n             * Cloud Functions.\n             *\n             * There are three important differences between listening to a Realtime\n             * Database event in Cloud Functions and using the Realtime Database in\n             * the client and Admin SDKs:\n             * 1. Cloud Functions allows wildcards in the `path` name. Any `path`\n             *    component in curly brackets (`{}`) is a wildcard that matches all\n             *    strings. The value that matched a certain invocation of a Cloud\n             *    Function is returned as part of the `context.params` object. For\n             *    example, `ref(\"messages/{messageId}\")` matches changes at\n             *    `/messages/message1` or `/messages/message2`, resulting in\n             *    `context.params.messageId` being set to `\"message1\"` or\n             *    `\"message2\"`, respectively.\n             * 2. Cloud Functions do not fire an event for data that already existed\n             *    before the Cloud Function was deployed.\n             * 3. Cloud Function events have access to more information, including\n             *    information about the user who triggered the Cloud Function.\n             * @param ref Path of the database to listen to.\n             */\n            ref: (path) => database._refWithOptions(path, this.options),\n        };\n    }\n    get firestore() {\n        return {\n            /**\n             * Select the Firestore document to listen to for events.\n             * @param path Full database path to listen to. This includes the name of\n             * the collection that the document is a part of. For example, if the\n             * collection is named \"users\" and the document is named \"Ada\", then the\n             * path is \"/users/Ada\".\n             */\n            document: (path) => firestore._documentWithOptions(path, this.options),\n            /** @hidden */\n            namespace: (namespace) => firestore._namespaceWithOptions(namespace, this.options),\n            /** @hidden */\n            database: (database) => firestore._databaseWithOptions(database, this.options),\n        };\n    }\n    get crashlytics() {\n        return {\n            /**\n             * Handle events related to Crashlytics issues. An issue in Crashlytics is\n             * an aggregation of crashes which have a shared root cause.\n             */\n            issue: () => crashlytics._issueWithOptions(this.options),\n        };\n    }\n    get analytics() {\n        return {\n            /**\n             * Select analytics events to listen to for events.\n             * @param analyticsEventType Name of the analytics event type.\n             */\n            event: (analyticsEventType) => analytics._eventWithOptions(analyticsEventType, this.options),\n        };\n    }\n    get remoteConfig() {\n        return {\n            /**\n             * Handle all updates (including rollbacks) that affect a Remote Config\n             * project.\n             * @param handler A function that takes the updated Remote Config template\n             * version metadata as an argument.\n             */\n            onUpdate: (handler) => remoteConfig._onUpdateWithOptions(handler, this.options),\n        };\n    }\n    get storage() {\n        return {\n            /**\n             * The optional bucket function allows you to choose which buckets' events\n             * to handle. This step can be bypassed by calling object() directly,\n             * which will use the default Cloud Storage for Firebase bucket.\n             * @param bucket Name of the Google Cloud Storage bucket to listen to.\n             */\n            bucket: (bucket) => storage._bucketWithOptions(this.options, bucket),\n            /**\n             * Handle events related to Cloud Storage objects.\n             */\n            object: () => storage._objectWithOptions(this.options),\n        };\n    }\n    get pubsub() {\n        return {\n            /**\n             * Select Cloud Pub/Sub topic to listen to.\n             * @param topic Name of Pub/Sub topic, must belong to the same project as\n             * the function.\n             */\n            topic: (topic) => pubsub._topicWithOptions(topic, this.options),\n            schedule: (schedule) => pubsub._scheduleWithOptions(schedule, this.options),\n        };\n    }\n    get auth() {\n        return {\n            /**\n             * Handle events related to Firebase authentication users.\n             */\n            user: () => auth._userWithOptions(this.options),\n        };\n    }\n    get testLab() {\n        return {\n            /**\n             * Handle events related to Test Lab test matrices.\n             */\n            testMatrix: () => testLab._testMatrixWithOpts(this.options),\n        };\n    }\n}\nexports.FunctionBuilder = FunctionBuilder;\n"]},"metadata":{},"sourceType":"script"}