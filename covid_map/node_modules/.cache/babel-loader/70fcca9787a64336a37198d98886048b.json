{"ast":null,"code":"\"use strict\"; // The MIT License (MIT)\n//\n// Copyright (c) 2017 Firebase\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst path = require(\"path\");\n\nfunction config() {\n  if (typeof config.singleton === 'undefined') {\n    init();\n  }\n\n  return config.singleton;\n}\n\nexports.config = config;\n/**\n * Store and retrieve project configuration data such as third-party API\n * keys or other settings. You can set configuration values using the\n * Firebase CLI as described in\n * [Environment Configuration](/docs/functions/config-env).\n */\n\n(function (config) {})(config = exports.config || (exports.config = {}));\n/** @hidden */\n\n\nfunction firebaseConfig() {\n  const env = process.env.FIREBASE_CONFIG;\n\n  if (env) {\n    return JSON.parse(env);\n  } // Could have Runtime Config with Firebase in it as an ENV value.\n\n\n  try {\n    const config = JSON.parse(process.env.CLOUD_RUNTIME_CONFIG);\n\n    if (config.firebase) {\n      return config.firebase;\n    }\n  } catch (e) {} // Do nothing\n  // Could have Runtime Config with Firebase in it as an ENV location or default.\n\n\n  try {\n    const configPath = process.env.CLOUD_RUNTIME_CONFIG || path.join(process.env.PWD, '.runtimeconfig.json');\n\n    const config = require(configPath);\n\n    if (config.firebase) {\n      return config.firebase;\n    }\n  } catch (e) {// Do nothing\n  }\n\n  return null;\n}\n\nexports.firebaseConfig = firebaseConfig;\n\nfunction init() {\n  try {\n    const parsed = JSON.parse(process.env.CLOUD_RUNTIME_CONFIG);\n    delete parsed.firebase;\n    config.singleton = parsed;\n    return;\n  } catch (e) {// Do nothing\n  }\n\n  try {\n    const configPath = process.env.CLOUD_RUNTIME_CONFIG || path.join(process.env.PWD, '.runtimeconfig.json');\n\n    const parsed = require(configPath);\n\n    delete parsed.firebase;\n    config.singleton = parsed;\n    return;\n  } catch (e) {// Do nothing\n  }\n\n  config.singleton = {};\n}","map":{"version":3,"sources":["/Users/a3506/Documents/WebDev/Map/WebDev/covid_map/node_modules/firebase-functions/lib/config.js"],"names":["Object","defineProperty","exports","value","path","require","config","singleton","init","firebaseConfig","env","process","FIREBASE_CONFIG","JSON","parse","CLOUD_RUNTIME_CONFIG","firebase","e","configPath","join","PWD","parsed"],"mappings":"AAAA,a,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,SAASC,MAAT,GAAkB;AACd,MAAI,OAAOA,MAAM,CAACC,SAAd,KAA4B,WAAhC,EAA6C;AACzCC,IAAAA,IAAI;AACP;;AACD,SAAOF,MAAM,CAACC,SAAd;AACH;;AACDL,OAAO,CAACI,MAAR,GAAiBA,MAAjB;AACA;;;;;;;AAMA,CAAC,UAAUA,MAAV,EAAkB,CAClB,CADD,EACGA,MAAM,GAAGJ,OAAO,CAACI,MAAR,KAAmBJ,OAAO,CAACI,MAAR,GAAiB,EAApC,CADZ;AAEA;;;AACA,SAASG,cAAT,GAA0B;AACtB,QAAMC,GAAG,GAAGC,OAAO,CAACD,GAAR,CAAYE,eAAxB;;AACA,MAAIF,GAAJ,EAAS;AACL,WAAOG,IAAI,CAACC,KAAL,CAAWJ,GAAX,CAAP;AACH,GAJqB,CAKtB;;;AACA,MAAI;AACA,UAAMJ,MAAM,GAAGO,IAAI,CAACC,KAAL,CAAWH,OAAO,CAACD,GAAR,CAAYK,oBAAvB,CAAf;;AACA,QAAIT,MAAM,CAACU,QAAX,EAAqB;AACjB,aAAOV,MAAM,CAACU,QAAd;AACH;AACJ,GALD,CAMA,OAAOC,CAAP,EAAU,CAET,CAFD,CACI;AAEJ;;;AACA,MAAI;AACA,UAAMC,UAAU,GAAGP,OAAO,CAACD,GAAR,CAAYK,oBAAZ,IACfX,IAAI,CAACe,IAAL,CAAUR,OAAO,CAACD,GAAR,CAAYU,GAAtB,EAA2B,qBAA3B,CADJ;;AAEA,UAAMd,MAAM,GAAGD,OAAO,CAACa,UAAD,CAAtB;;AACA,QAAIZ,MAAM,CAACU,QAAX,EAAqB;AACjB,aAAOV,MAAM,CAACU,QAAd;AACH;AACJ,GAPD,CAQA,OAAOC,CAAP,EAAU,CACN;AACH;;AACD,SAAO,IAAP;AACH;;AACDf,OAAO,CAACO,cAAR,GAAyBA,cAAzB;;AACA,SAASD,IAAT,GAAgB;AACZ,MAAI;AACA,UAAMa,MAAM,GAAGR,IAAI,CAACC,KAAL,CAAWH,OAAO,CAACD,GAAR,CAAYK,oBAAvB,CAAf;AACA,WAAOM,MAAM,CAACL,QAAd;AACAV,IAAAA,MAAM,CAACC,SAAP,GAAmBc,MAAnB;AACA;AACH,GALD,CAMA,OAAOJ,CAAP,EAAU,CACN;AACH;;AACD,MAAI;AACA,UAAMC,UAAU,GAAGP,OAAO,CAACD,GAAR,CAAYK,oBAAZ,IACfX,IAAI,CAACe,IAAL,CAAUR,OAAO,CAACD,GAAR,CAAYU,GAAtB,EAA2B,qBAA3B,CADJ;;AAEA,UAAMC,MAAM,GAAGhB,OAAO,CAACa,UAAD,CAAtB;;AACA,WAAOG,MAAM,CAACL,QAAd;AACAV,IAAAA,MAAM,CAACC,SAAP,GAAmBc,MAAnB;AACA;AACH,GAPD,CAQA,OAAOJ,CAAP,EAAU,CACN;AACH;;AACDX,EAAAA,MAAM,CAACC,SAAP,GAAmB,EAAnB;AACH","sourcesContent":["\"use strict\";\n// The MIT License (MIT)\n//\n// Copyright (c) 2017 Firebase\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst path = require(\"path\");\nfunction config() {\n    if (typeof config.singleton === 'undefined') {\n        init();\n    }\n    return config.singleton;\n}\nexports.config = config;\n/**\n * Store and retrieve project configuration data such as third-party API\n * keys or other settings. You can set configuration values using the\n * Firebase CLI as described in\n * [Environment Configuration](/docs/functions/config-env).\n */\n(function (config) {\n})(config = exports.config || (exports.config = {}));\n/** @hidden */\nfunction firebaseConfig() {\n    const env = process.env.FIREBASE_CONFIG;\n    if (env) {\n        return JSON.parse(env);\n    }\n    // Could have Runtime Config with Firebase in it as an ENV value.\n    try {\n        const config = JSON.parse(process.env.CLOUD_RUNTIME_CONFIG);\n        if (config.firebase) {\n            return config.firebase;\n        }\n    }\n    catch (e) {\n        // Do nothing\n    }\n    // Could have Runtime Config with Firebase in it as an ENV location or default.\n    try {\n        const configPath = process.env.CLOUD_RUNTIME_CONFIG ||\n            path.join(process.env.PWD, '.runtimeconfig.json');\n        const config = require(configPath);\n        if (config.firebase) {\n            return config.firebase;\n        }\n    }\n    catch (e) {\n        // Do nothing\n    }\n    return null;\n}\nexports.firebaseConfig = firebaseConfig;\nfunction init() {\n    try {\n        const parsed = JSON.parse(process.env.CLOUD_RUNTIME_CONFIG);\n        delete parsed.firebase;\n        config.singleton = parsed;\n        return;\n    }\n    catch (e) {\n        // Do nothing\n    }\n    try {\n        const configPath = process.env.CLOUD_RUNTIME_CONFIG ||\n            path.join(process.env.PWD, '.runtimeconfig.json');\n        const parsed = require(configPath);\n        delete parsed.firebase;\n        config.singleton = parsed;\n        return;\n    }\n    catch (e) {\n        // Do nothing\n    }\n    config.singleton = {};\n}\n"]},"metadata":{},"sourceType":"script"}