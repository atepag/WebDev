{"ast":null,"code":"\"use strict\"; // The MIT License (MIT)\n//\n// Copyright (c) 2017 Firebase\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst _ = require(\"lodash\");\n\nconst apps_1 = require(\"../apps\");\n\nconst cloud_functions_1 = require(\"../cloud-functions\");\n\nconst config_1 = require(\"../config\");\n\nconst path_1 = require(\"../utilities/path\");\n\nconst utils_1 = require(\"../utils\");\n/** @hidden */\n\n\nexports.provider = 'google.firebase.database';\n/** @hidden */\n\nexports.service = 'firebaseio.com'; // NOTE(inlined): Should we relax this a bit to allow staging or alternate implementations of our API?\n\nconst databaseURLRegex = new RegExp('https://([^.]+).firebaseio.com');\n/**\n * Registers a function that triggers on events from a specific\n * Firebase Realtime Database instance.\n *\n * Use this method together with `ref` to specify the instance on which to\n * watch for database events. For example: `firebase.database.instance('my-app-db-2').ref('/foo/bar')`\n *\n * Note that `functions.database.ref` used without `instance` watches the\n * *default* instance for events.\n *\n * @param instance The instance name of the database instance\n *   to watch for write events.\n * @return Firebase Realtime Database instance builder interface.\n */\n\nfunction instance(instance) {\n  return _instanceWithOptions(instance, {});\n}\n\nexports.instance = instance;\n/**\n * Registers a function that triggers on Firebase Realtime Database write\n * events.\n *\n * This method behaves very similarly to the method of the same name in the\n * client and Admin Firebase SDKs. Any change to the Database that affects the\n * data at or below the provided `path` will fire an event in Cloud Functions.\n *\n * There are three important differences between listening to a Realtime\n * Database event in Cloud Functions and using the Realtime Database in the\n * client and Admin SDKs:\n * 1. Cloud Functions allows wildcards in the `path` name. Any `path` component\n *    in curly brackets (`{}`) is a wildcard that matches all strings. The value\n *    that matched a certain invocation of a Cloud Function is returned as part\n *    of the [`EventContext.params`](cloud_functions_eventcontext.html#params object. For\n *    example, `ref(\"messages/{messageId}\")` matches changes at\n *    `/messages/message1` or `/messages/message2`, resulting in\n *    `event.params.messageId` being set to `\"message1\"` or `\"message2\"`,\n *    respectively.\n * 2. Cloud Functions do not fire an event for data that already existed before\n *    the Cloud Function was deployed.\n * 3. Cloud Function events have access to more information, including a\n *    snapshot of the previous event data and information about the user who\n *    triggered the Cloud Function.\n *\n * @param path The path within the Database to watch for write events.\n * @return Firebase Realtime Database builder interface.\n */\n\nfunction ref(path) {\n  return _refWithOptions(path, {});\n}\n\nexports.ref = ref;\n/** @hidden */\n\nfunction _instanceWithOptions(instance, options) {\n  return new InstanceBuilder(instance, options);\n}\n\nexports._instanceWithOptions = _instanceWithOptions;\n/**\n * The Firebase Realtime Database instance builder interface.\n *\n * Access via [`database.instance()`](providers_database_.html#instance).\n */\n\nclass InstanceBuilder {\n  /** @hidden */\n  constructor(instance, options) {\n    this.instance = instance;\n    this.options = options;\n  }\n  /**\n   * @return Firebase Realtime Database reference builder interface.\n   */\n\n\n  ref(path) {\n    const normalized = path_1.normalizePath(path);\n    return new RefBuilder(apps_1.apps(), () => `projects/_/instances/${this.instance}/refs/${normalized}`, this.options);\n  }\n\n}\n\nexports.InstanceBuilder = InstanceBuilder;\n/** @hidden */\n\nfunction _refWithOptions(path, options) {\n  const resourceGetter = () => {\n    const normalized = path_1.normalizePath(path);\n    const databaseURL = config_1.firebaseConfig().databaseURL;\n\n    if (!databaseURL) {\n      throw new Error('Missing expected firebase config value databaseURL, ' + 'config is actually' + JSON.stringify(config_1.firebaseConfig()) + '\\n If you are unit testing, please set process.env.FIREBASE_CONFIG');\n    }\n\n    const match = databaseURL.match(databaseURLRegex);\n\n    if (!match) {\n      throw new Error('Invalid value for config firebase.databaseURL: ' + databaseURL);\n    }\n\n    const subdomain = match[1];\n    return `projects/_/instances/${subdomain}/refs/${normalized}`;\n  };\n\n  return new RefBuilder(apps_1.apps(), resourceGetter, options);\n}\n\nexports._refWithOptions = _refWithOptions;\n/**\n * The Firebase Realtime Database reference builder interface.\n *\n * Access via [`functions.database.ref()`](functions.database#.ref).\n */\n\nclass RefBuilder {\n  /** @hidden */\n  constructor(apps, triggerResource, options) {\n    this.apps = apps;\n    this.triggerResource = triggerResource;\n    this.options = options;\n\n    this.changeConstructor = raw => {\n      const [dbInstance, path] = resourceToInstanceAndPath(raw.context.resource.name);\n      const before = new DataSnapshot(raw.data.data, path, this.apps.admin, dbInstance);\n      const after = new DataSnapshot(utils_1.applyChange(raw.data.data, raw.data.delta), path, this.apps.admin, dbInstance);\n      return {\n        before,\n        after\n      };\n    };\n  }\n  /**\n   * Event handler that fires every time a Firebase Realtime Database write\n   * of any kind (creation, update, or delete) occurs.\n   *\n   * @param handler Event handler that runs every time a Firebase Realtime Database\n   *   write occurs.\n   * @return A Cloud Function that you can export and deploy.\n   */\n\n\n  onWrite(handler) {\n    return this.onOperation(handler, 'ref.write', this.changeConstructor);\n  }\n  /**\n   * Event handler that fires every time data is updated in\n   * Firebase Realtime Database.\n   *\n   * @param handler Event handler which is run every time a Firebase Realtime Database\n   *   write occurs.\n   * @return A Cloud\n   *   Function which you can export and deploy.\n   */\n\n\n  onUpdate(handler) {\n    return this.onOperation(handler, 'ref.update', this.changeConstructor);\n  }\n  /**\n   * Event handler that fires every time new data is created in\n   * Firebase Realtime Database.\n   *\n   * @param handler Event handler that runs every time new data is created in\n   *   Firebase Realtime Database.\n   * @return A Cloud Function that you can export and deploy.\n   */\n\n\n  onCreate(handler) {\n    const dataConstructor = raw => {\n      const [dbInstance, path] = resourceToInstanceAndPath(raw.context.resource.name);\n      return new DataSnapshot(raw.data.delta, path, this.apps.admin, dbInstance);\n    };\n\n    return this.onOperation(handler, 'ref.create', dataConstructor);\n  }\n  /**\n   * Event handler that fires every time data is deleted from\n   * Firebase Realtime Database.\n   *\n   * @param handler Event handler that runs every time data is deleted from\n   *   Firebase Realtime Database.\n   * @return A Cloud Function that you can export and deploy.\n   */\n\n\n  onDelete(handler) {\n    const dataConstructor = raw => {\n      const [dbInstance, path] = resourceToInstanceAndPath(raw.context.resource.name);\n      return new DataSnapshot(raw.data.data, path, this.apps.admin, dbInstance);\n    };\n\n    return this.onOperation(handler, 'ref.delete', dataConstructor);\n  }\n\n  onOperation(handler, eventType, dataConstructor) {\n    return cloud_functions_1.makeCloudFunction({\n      handler,\n      provider: exports.provider,\n      service: exports.service,\n      eventType,\n      legacyEventType: `providers/${exports.provider}/eventTypes/${eventType}`,\n      triggerResource: this.triggerResource,\n      dataConstructor,\n      before: event => this.apps.retain(),\n      after: event => this.apps.release(),\n      options: this.options\n    });\n  }\n\n}\n\nexports.RefBuilder = RefBuilder;\n/* Utility function to extract database reference from resource string */\n\n/** @hidden */\n\nfunction resourceToInstanceAndPath(resource) {\n  const resourceRegex = `projects/([^/]+)/instances/([a-zA-Z0-9\\-^/]+)/refs(/.+)?`;\n  const match = resource.match(new RegExp(resourceRegex));\n\n  if (!match) {\n    throw new Error(`Unexpected resource string for Firebase Realtime Database event: ${resource}. ` + 'Expected string in the format of \"projects/_/instances/{firebaseioSubdomain}/refs/{ref=**}\"');\n  }\n\n  const [, project, dbInstanceName, path] = match;\n\n  if (project !== '_') {\n    throw new Error(`Expect project to be '_' in a Firebase Realtime Database event`);\n  }\n\n  const dbInstance = 'https://' + dbInstanceName + '.firebaseio.com';\n  return [dbInstance, path];\n}\n\nexports.resourceToInstanceAndPath = resourceToInstanceAndPath;\n/**\n * Interface representing a Firebase Realtime Database data snapshot.\n */\n\nclass DataSnapshot {\n  constructor(data, path, // path will be undefined for the database root\n  app, instance) {\n    this.app = app;\n\n    if (instance) {\n      // SDK always supplies instance, but user's unit tests may not\n      this.instance = instance;\n    } else if (app) {\n      this.instance = app.options.databaseURL;\n    } else if (process.env.GCLOUD_PROJECT) {\n      this.instance = 'https://' + process.env.GCLOUD_PROJECT + '.firebaseio.com';\n    }\n\n    this._path = path;\n    this._data = data;\n  }\n  /**\n   * Returns a [`Reference`](/docs/reference/admin/node/admin.database.Reference)\n   * to the Database location where the triggering write occurred. Has\n   * full read and write access.\n   */\n\n\n  get ref() {\n    if (!this.app) {\n      // may be unpopulated in user's unit tests\n      throw new Error('Please supply a Firebase app in the constructor for DataSnapshot' + ' in order to use the .ref method.');\n    }\n\n    if (!this._ref) {\n      this._ref = this.app.database(this.instance).ref(this._fullPath());\n    }\n\n    return this._ref;\n  }\n  /**\n   * The key (last part of the path) of the location of this `DataSnapshot`.\n   *\n   * The last token in a Database location is considered its key. For example,\n   * \"ada\" is the key for the `/users/ada/` node. Accessing the key on any\n   * `DataSnapshot` will return the key for the location that generated it.\n   * However, accessing the key on the root URL of a Database will return `null`.\n   */\n\n\n  get key() {\n    const last = _.last(path_1.pathParts(this._fullPath()));\n\n    return !last || last === '' ? null : last;\n  }\n  /**\n   * Extracts a JavaScript value from a `DataSnapshot`.\n   *\n   * Depending on the data in a `DataSnapshot`, the `val()` method may return a\n   * scalar type (string, number, or boolean), an array, or an object. It may also\n   * return `null`, indicating that the `DataSnapshot` is empty (contains no\n   * data).\n   *\n   * @return The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n\n\n  val() {\n    const parts = path_1.pathParts(this._childPath);\n    const source = this._data;\n\n    const node = _.cloneDeep(parts.length ? _.get(source, parts, null) : source);\n\n    return this._checkAndConvertToArray(node);\n  }\n  /**\n   * Exports the entire contents of the `DataSnapshot` as a JavaScript object.\n   *\n   * The `exportVal()` method is similar to `val()`, except priority information\n   * is included (if available), making it suitable for backing up your data.\n   *\n   * @return The contents of the `DataSnapshot` as a JavaScript value\n   *   (Object, Array, string, number, boolean, or `null`).\n   */\n\n\n  exportVal() {\n    return this.val();\n  }\n  /**\n   * Gets the priority value of the data in this `DataSnapshot`.\n   *\n   * As an alternative to using priority, applications can order collections by\n   * ordinary properties. See [Sorting and filtering\n   * data](/docs/database/web/lists-of-data#sorting_and_filtering_data).\n   *\n   * @return The priority value of the data.\n   */\n\n\n  getPriority() {\n    return 0;\n  }\n  /**\n   * Returns `true` if this `DataSnapshot` contains any data. It is slightly more\n   * efficient than using `snapshot.val() !== null`.\n   *\n   * @return `true` if this `DataSnapshot` contains any data; otherwise, `false`.\n   */\n\n\n  exists() {\n    return !_.isNull(this.val());\n  }\n  /**\n   * Gets a `DataSnapshot` for the location at the specified relative path.\n   *\n   * The relative path can either be a simple child name (for example, \"ada\") or\n   * a deeper slash-separated path (for example, \"ada/name/first\").\n   *\n   * @param path A relative path from this location to the desired child\n   *   location.\n   * @return The specified child location.\n   */\n\n\n  child(childPath) {\n    if (!childPath) {\n      return this;\n    }\n\n    return this._dup(childPath);\n  }\n  /**\n   * Enumerates the `DataSnapshot`s of the children items.\n   *\n   * Because of the way JavaScript objects work, the ordering of data in the\n   * JavaScript object returned by `val()` is not guaranteed to match the ordering\n   * on the server nor the ordering of `child_added` events. That is where\n   * `forEach()` comes in handy. It guarantees the children of a `DataSnapshot`\n   * will be iterated in their query order.\n   *\n   * If no explicit `orderBy*()` method is used, results are returned\n   * ordered by key (unless priorities are used, in which case, results are\n   * returned by priority).\n   *\n   * @param action A function that will be called for each child `DataSnapshot`.\n   *   The callback can return `true` to cancel further enumeration.\n   *\n   * @return `true` if enumeration was canceled due to your callback\n   *   returning `true`.\n   */\n\n\n  forEach(action) {\n    const val = this.val();\n\n    if (_.isPlainObject(val)) {\n      return _.some(val, (value, key) => action(this.child(key)) === true);\n    }\n\n    return false;\n  }\n  /**\n   * Returns `true` if the specified child path has (non-`null`) data.\n   *\n   * @param path A relative path to the location of a potential child.\n   * @return `true` if data exists at the specified child path; otherwise,\n   *   `false`.\n   */\n\n\n  hasChild(childPath) {\n    return this.child(childPath).exists();\n  }\n  /**\n   * Returns whether or not the `DataSnapshot` has any non-`null` child\n   * properties.\n   *\n   * You can use `hasChildren()` to determine if a `DataSnapshot` has any\n   * children. If it does, you can enumerate them using `forEach()`. If it\n   * doesn't, then either this snapshot contains a primitive value (which can be\n   * retrieved with `val()`) or it is empty (in which case, `val()` will return\n   * `null`).\n   *\n   * @return `true` if this snapshot has any children; else `false`.\n   */\n\n\n  hasChildren() {\n    const val = this.val();\n    return _.isPlainObject(val) && _.keys(val).length > 0;\n  }\n  /**\n   * Returns the number of child properties of this `DataSnapshot`.\n   *\n   * @return Number of child properties of this `DataSnapshot`.\n   */\n\n\n  numChildren() {\n    const val = this.val();\n    return _.isPlainObject(val) ? Object.keys(val).length : 0;\n  }\n  /**\n   * Returns a JSON-serializable representation of this object.\n   *\n   * @return A JSON-serializable representation of this object.\n   */\n\n\n  toJSON() {\n    return this.val();\n  }\n  /** Recursive function to check if keys are numeric & convert node object to array if they are\n   *\n   * @hidden\n   */\n\n\n  _checkAndConvertToArray(node) {\n    if (node === null || typeof node === 'undefined') {\n      return null;\n    }\n\n    if (typeof node !== 'object') {\n      return node;\n    }\n\n    const obj = {};\n    let numKeys = 0;\n    let maxKey = 0;\n    let allIntegerKeys = true;\n\n    for (const key in node) {\n      if (!node.hasOwnProperty(key)) {\n        continue;\n      }\n\n      const childNode = node[key];\n      obj[key] = this._checkAndConvertToArray(childNode);\n      numKeys++;\n      const integerRegExp = /^(0|[1-9]\\d*)$/;\n\n      if (allIntegerKeys && integerRegExp.test(key)) {\n        maxKey = Math.max(maxKey, Number(key));\n      } else {\n        allIntegerKeys = false;\n      }\n    }\n\n    if (allIntegerKeys && maxKey < 2 * numKeys) {\n      // convert to array.\n      const array = [];\n\n      _.forOwn(obj, (val, key) => {\n        array[key] = val;\n      });\n\n      return array;\n    }\n\n    return obj;\n  }\n  /** @hidden */\n\n\n  _dup(childPath) {\n    const dup = new DataSnapshot(this._data, undefined, this.app, this.instance);\n    [dup._path, dup._childPath] = [this._path, this._childPath];\n\n    if (childPath) {\n      dup._childPath = path_1.joinPath(dup._childPath, childPath);\n    }\n\n    return dup;\n  }\n  /** @hidden */\n\n\n  _fullPath() {\n    const out = (this._path || '') + '/' + (this._childPath || '');\n    return out;\n  }\n\n}\n\nexports.DataSnapshot = DataSnapshot;","map":{"version":3,"sources":["/Users/a3506/Documents/WebDev/Map/WebDev/covid_map/node_modules/firebase-functions/lib/providers/database.js"],"names":["Object","defineProperty","exports","value","_","require","apps_1","cloud_functions_1","config_1","path_1","utils_1","provider","service","databaseURLRegex","RegExp","instance","_instanceWithOptions","ref","path","_refWithOptions","options","InstanceBuilder","constructor","normalized","normalizePath","RefBuilder","apps","resourceGetter","databaseURL","firebaseConfig","Error","JSON","stringify","match","subdomain","triggerResource","changeConstructor","raw","dbInstance","resourceToInstanceAndPath","context","resource","name","before","DataSnapshot","data","admin","after","applyChange","delta","onWrite","handler","onOperation","onUpdate","onCreate","dataConstructor","onDelete","eventType","makeCloudFunction","legacyEventType","event","retain","release","resourceRegex","project","dbInstanceName","app","process","env","GCLOUD_PROJECT","_path","_data","_ref","database","_fullPath","key","last","pathParts","val","parts","_childPath","source","node","cloneDeep","length","get","_checkAndConvertToArray","exportVal","getPriority","exists","isNull","child","childPath","_dup","forEach","action","isPlainObject","some","hasChild","hasChildren","keys","numChildren","toJSON","obj","numKeys","maxKey","allIntegerKeys","hasOwnProperty","childNode","integerRegExp","test","Math","max","Number","array","forOwn","dup","undefined","joinPath","out"],"mappings":"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","sourcesContent":["\"use strict\";\n// The MIT License (MIT)\n//\n// Copyright (c) 2017 Firebase\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst _ = require(\"lodash\");\nconst apps_1 = require(\"../apps\");\nconst cloud_functions_1 = require(\"../cloud-functions\");\nconst config_1 = require(\"../config\");\nconst path_1 = require(\"../utilities/path\");\nconst utils_1 = require(\"../utils\");\n/** @hidden */\nexports.provider = 'google.firebase.database';\n/** @hidden */\nexports.service = 'firebaseio.com';\n// NOTE(inlined): Should we relax this a bit to allow staging or alternate implementations of our API?\nconst databaseURLRegex = new RegExp('https://([^.]+).firebaseio.com');\n/**\n * Registers a function that triggers on events from a specific\n * Firebase Realtime Database instance.\n *\n * Use this method together with `ref` to specify the instance on which to\n * watch for database events. For example: `firebase.database.instance('my-app-db-2').ref('/foo/bar')`\n *\n * Note that `functions.database.ref` used without `instance` watches the\n * *default* instance for events.\n *\n * @param instance The instance name of the database instance\n *   to watch for write events.\n * @return Firebase Realtime Database instance builder interface.\n */\nfunction instance(instance) {\n    return _instanceWithOptions(instance, {});\n}\nexports.instance = instance;\n/**\n * Registers a function that triggers on Firebase Realtime Database write\n * events.\n *\n * This method behaves very similarly to the method of the same name in the\n * client and Admin Firebase SDKs. Any change to the Database that affects the\n * data at or below the provided `path` will fire an event in Cloud Functions.\n *\n * There are three important differences between listening to a Realtime\n * Database event in Cloud Functions and using the Realtime Database in the\n * client and Admin SDKs:\n * 1. Cloud Functions allows wildcards in the `path` name. Any `path` component\n *    in curly brackets (`{}`) is a wildcard that matches all strings. The value\n *    that matched a certain invocation of a Cloud Function is returned as part\n *    of the [`EventContext.params`](cloud_functions_eventcontext.html#params object. For\n *    example, `ref(\"messages/{messageId}\")` matches changes at\n *    `/messages/message1` or `/messages/message2`, resulting in\n *    `event.params.messageId` being set to `\"message1\"` or `\"message2\"`,\n *    respectively.\n * 2. Cloud Functions do not fire an event for data that already existed before\n *    the Cloud Function was deployed.\n * 3. Cloud Function events have access to more information, including a\n *    snapshot of the previous event data and information about the user who\n *    triggered the Cloud Function.\n *\n * @param path The path within the Database to watch for write events.\n * @return Firebase Realtime Database builder interface.\n */\nfunction ref(path) {\n    return _refWithOptions(path, {});\n}\nexports.ref = ref;\n/** @hidden */\nfunction _instanceWithOptions(instance, options) {\n    return new InstanceBuilder(instance, options);\n}\nexports._instanceWithOptions = _instanceWithOptions;\n/**\n * The Firebase Realtime Database instance builder interface.\n *\n * Access via [`database.instance()`](providers_database_.html#instance).\n */\nclass InstanceBuilder {\n    /** @hidden */\n    constructor(instance, options) {\n        this.instance = instance;\n        this.options = options;\n    }\n    /**\n     * @return Firebase Realtime Database reference builder interface.\n     */\n    ref(path) {\n        const normalized = path_1.normalizePath(path);\n        return new RefBuilder(apps_1.apps(), () => `projects/_/instances/${this.instance}/refs/${normalized}`, this.options);\n    }\n}\nexports.InstanceBuilder = InstanceBuilder;\n/** @hidden */\nfunction _refWithOptions(path, options) {\n    const resourceGetter = () => {\n        const normalized = path_1.normalizePath(path);\n        const databaseURL = config_1.firebaseConfig().databaseURL;\n        if (!databaseURL) {\n            throw new Error('Missing expected firebase config value databaseURL, ' +\n                'config is actually' +\n                JSON.stringify(config_1.firebaseConfig()) +\n                '\\n If you are unit testing, please set process.env.FIREBASE_CONFIG');\n        }\n        const match = databaseURL.match(databaseURLRegex);\n        if (!match) {\n            throw new Error('Invalid value for config firebase.databaseURL: ' + databaseURL);\n        }\n        const subdomain = match[1];\n        return `projects/_/instances/${subdomain}/refs/${normalized}`;\n    };\n    return new RefBuilder(apps_1.apps(), resourceGetter, options);\n}\nexports._refWithOptions = _refWithOptions;\n/**\n * The Firebase Realtime Database reference builder interface.\n *\n * Access via [`functions.database.ref()`](functions.database#.ref).\n */\nclass RefBuilder {\n    /** @hidden */\n    constructor(apps, triggerResource, options) {\n        this.apps = apps;\n        this.triggerResource = triggerResource;\n        this.options = options;\n        this.changeConstructor = (raw) => {\n            const [dbInstance, path] = resourceToInstanceAndPath(raw.context.resource.name);\n            const before = new DataSnapshot(raw.data.data, path, this.apps.admin, dbInstance);\n            const after = new DataSnapshot(utils_1.applyChange(raw.data.data, raw.data.delta), path, this.apps.admin, dbInstance);\n            return {\n                before,\n                after,\n            };\n        };\n    }\n    /**\n     * Event handler that fires every time a Firebase Realtime Database write\n     * of any kind (creation, update, or delete) occurs.\n     *\n     * @param handler Event handler that runs every time a Firebase Realtime Database\n     *   write occurs.\n     * @return A Cloud Function that you can export and deploy.\n     */\n    onWrite(handler) {\n        return this.onOperation(handler, 'ref.write', this.changeConstructor);\n    }\n    /**\n     * Event handler that fires every time data is updated in\n     * Firebase Realtime Database.\n     *\n     * @param handler Event handler which is run every time a Firebase Realtime Database\n     *   write occurs.\n     * @return A Cloud\n     *   Function which you can export and deploy.\n     */\n    onUpdate(handler) {\n        return this.onOperation(handler, 'ref.update', this.changeConstructor);\n    }\n    /**\n     * Event handler that fires every time new data is created in\n     * Firebase Realtime Database.\n     *\n     * @param handler Event handler that runs every time new data is created in\n     *   Firebase Realtime Database.\n     * @return A Cloud Function that you can export and deploy.\n     */\n    onCreate(handler) {\n        const dataConstructor = (raw) => {\n            const [dbInstance, path] = resourceToInstanceAndPath(raw.context.resource.name);\n            return new DataSnapshot(raw.data.delta, path, this.apps.admin, dbInstance);\n        };\n        return this.onOperation(handler, 'ref.create', dataConstructor);\n    }\n    /**\n     * Event handler that fires every time data is deleted from\n     * Firebase Realtime Database.\n     *\n     * @param handler Event handler that runs every time data is deleted from\n     *   Firebase Realtime Database.\n     * @return A Cloud Function that you can export and deploy.\n     */\n    onDelete(handler) {\n        const dataConstructor = (raw) => {\n            const [dbInstance, path] = resourceToInstanceAndPath(raw.context.resource.name);\n            return new DataSnapshot(raw.data.data, path, this.apps.admin, dbInstance);\n        };\n        return this.onOperation(handler, 'ref.delete', dataConstructor);\n    }\n    onOperation(handler, eventType, dataConstructor) {\n        return cloud_functions_1.makeCloudFunction({\n            handler,\n            provider: exports.provider,\n            service: exports.service,\n            eventType,\n            legacyEventType: `providers/${exports.provider}/eventTypes/${eventType}`,\n            triggerResource: this.triggerResource,\n            dataConstructor,\n            before: (event) => this.apps.retain(),\n            after: (event) => this.apps.release(),\n            options: this.options,\n        });\n    }\n}\nexports.RefBuilder = RefBuilder;\n/* Utility function to extract database reference from resource string */\n/** @hidden */\nfunction resourceToInstanceAndPath(resource) {\n    const resourceRegex = `projects/([^/]+)/instances/([a-zA-Z0-9\\-^/]+)/refs(/.+)?`;\n    const match = resource.match(new RegExp(resourceRegex));\n    if (!match) {\n        throw new Error(`Unexpected resource string for Firebase Realtime Database event: ${resource}. ` +\n            'Expected string in the format of \"projects/_/instances/{firebaseioSubdomain}/refs/{ref=**}\"');\n    }\n    const [, project, dbInstanceName, path] = match;\n    if (project !== '_') {\n        throw new Error(`Expect project to be '_' in a Firebase Realtime Database event`);\n    }\n    const dbInstance = 'https://' + dbInstanceName + '.firebaseio.com';\n    return [dbInstance, path];\n}\nexports.resourceToInstanceAndPath = resourceToInstanceAndPath;\n/**\n * Interface representing a Firebase Realtime Database data snapshot.\n */\nclass DataSnapshot {\n    constructor(data, path, // path will be undefined for the database root\n    app, instance) {\n        this.app = app;\n        if (instance) {\n            // SDK always supplies instance, but user's unit tests may not\n            this.instance = instance;\n        }\n        else if (app) {\n            this.instance = app.options.databaseURL;\n        }\n        else if (process.env.GCLOUD_PROJECT) {\n            this.instance =\n                'https://' + process.env.GCLOUD_PROJECT + '.firebaseio.com';\n        }\n        this._path = path;\n        this._data = data;\n    }\n    /**\n     * Returns a [`Reference`](/docs/reference/admin/node/admin.database.Reference)\n     * to the Database location where the triggering write occurred. Has\n     * full read and write access.\n     */\n    get ref() {\n        if (!this.app) {\n            // may be unpopulated in user's unit tests\n            throw new Error('Please supply a Firebase app in the constructor for DataSnapshot' +\n                ' in order to use the .ref method.');\n        }\n        if (!this._ref) {\n            this._ref = this.app.database(this.instance).ref(this._fullPath());\n        }\n        return this._ref;\n    }\n    /**\n     * The key (last part of the path) of the location of this `DataSnapshot`.\n     *\n     * The last token in a Database location is considered its key. For example,\n     * \"ada\" is the key for the `/users/ada/` node. Accessing the key on any\n     * `DataSnapshot` will return the key for the location that generated it.\n     * However, accessing the key on the root URL of a Database will return `null`.\n     */\n    get key() {\n        const last = _.last(path_1.pathParts(this._fullPath()));\n        return !last || last === '' ? null : last;\n    }\n    /**\n     * Extracts a JavaScript value from a `DataSnapshot`.\n     *\n     * Depending on the data in a `DataSnapshot`, the `val()` method may return a\n     * scalar type (string, number, or boolean), an array, or an object. It may also\n     * return `null`, indicating that the `DataSnapshot` is empty (contains no\n     * data).\n     *\n     * @return The DataSnapshot's contents as a JavaScript value (Object,\n     *   Array, string, number, boolean, or `null`).\n     */\n    val() {\n        const parts = path_1.pathParts(this._childPath);\n        const source = this._data;\n        const node = _.cloneDeep(parts.length ? _.get(source, parts, null) : source);\n        return this._checkAndConvertToArray(node);\n    }\n    /**\n     * Exports the entire contents of the `DataSnapshot` as a JavaScript object.\n     *\n     * The `exportVal()` method is similar to `val()`, except priority information\n     * is included (if available), making it suitable for backing up your data.\n     *\n     * @return The contents of the `DataSnapshot` as a JavaScript value\n     *   (Object, Array, string, number, boolean, or `null`).\n     */\n    exportVal() {\n        return this.val();\n    }\n    /**\n     * Gets the priority value of the data in this `DataSnapshot`.\n     *\n     * As an alternative to using priority, applications can order collections by\n     * ordinary properties. See [Sorting and filtering\n     * data](/docs/database/web/lists-of-data#sorting_and_filtering_data).\n     *\n     * @return The priority value of the data.\n     */\n    getPriority() {\n        return 0;\n    }\n    /**\n     * Returns `true` if this `DataSnapshot` contains any data. It is slightly more\n     * efficient than using `snapshot.val() !== null`.\n     *\n     * @return `true` if this `DataSnapshot` contains any data; otherwise, `false`.\n     */\n    exists() {\n        return !_.isNull(this.val());\n    }\n    /**\n     * Gets a `DataSnapshot` for the location at the specified relative path.\n     *\n     * The relative path can either be a simple child name (for example, \"ada\") or\n     * a deeper slash-separated path (for example, \"ada/name/first\").\n     *\n     * @param path A relative path from this location to the desired child\n     *   location.\n     * @return The specified child location.\n     */\n    child(childPath) {\n        if (!childPath) {\n            return this;\n        }\n        return this._dup(childPath);\n    }\n    /**\n     * Enumerates the `DataSnapshot`s of the children items.\n     *\n     * Because of the way JavaScript objects work, the ordering of data in the\n     * JavaScript object returned by `val()` is not guaranteed to match the ordering\n     * on the server nor the ordering of `child_added` events. That is where\n     * `forEach()` comes in handy. It guarantees the children of a `DataSnapshot`\n     * will be iterated in their query order.\n     *\n     * If no explicit `orderBy*()` method is used, results are returned\n     * ordered by key (unless priorities are used, in which case, results are\n     * returned by priority).\n     *\n     * @param action A function that will be called for each child `DataSnapshot`.\n     *   The callback can return `true` to cancel further enumeration.\n     *\n     * @return `true` if enumeration was canceled due to your callback\n     *   returning `true`.\n     */\n    forEach(action) {\n        const val = this.val();\n        if (_.isPlainObject(val)) {\n            return _.some(val, (value, key) => action(this.child(key)) === true);\n        }\n        return false;\n    }\n    /**\n     * Returns `true` if the specified child path has (non-`null`) data.\n     *\n     * @param path A relative path to the location of a potential child.\n     * @return `true` if data exists at the specified child path; otherwise,\n     *   `false`.\n     */\n    hasChild(childPath) {\n        return this.child(childPath).exists();\n    }\n    /**\n     * Returns whether or not the `DataSnapshot` has any non-`null` child\n     * properties.\n     *\n     * You can use `hasChildren()` to determine if a `DataSnapshot` has any\n     * children. If it does, you can enumerate them using `forEach()`. If it\n     * doesn't, then either this snapshot contains a primitive value (which can be\n     * retrieved with `val()`) or it is empty (in which case, `val()` will return\n     * `null`).\n     *\n     * @return `true` if this snapshot has any children; else `false`.\n     */\n    hasChildren() {\n        const val = this.val();\n        return _.isPlainObject(val) && _.keys(val).length > 0;\n    }\n    /**\n     * Returns the number of child properties of this `DataSnapshot`.\n     *\n     * @return Number of child properties of this `DataSnapshot`.\n     */\n    numChildren() {\n        const val = this.val();\n        return _.isPlainObject(val) ? Object.keys(val).length : 0;\n    }\n    /**\n     * Returns a JSON-serializable representation of this object.\n     *\n     * @return A JSON-serializable representation of this object.\n     */\n    toJSON() {\n        return this.val();\n    }\n    /** Recursive function to check if keys are numeric & convert node object to array if they are\n     *\n     * @hidden\n     */\n    _checkAndConvertToArray(node) {\n        if (node === null || typeof node === 'undefined') {\n            return null;\n        }\n        if (typeof node !== 'object') {\n            return node;\n        }\n        const obj = {};\n        let numKeys = 0;\n        let maxKey = 0;\n        let allIntegerKeys = true;\n        for (const key in node) {\n            if (!node.hasOwnProperty(key)) {\n                continue;\n            }\n            const childNode = node[key];\n            obj[key] = this._checkAndConvertToArray(childNode);\n            numKeys++;\n            const integerRegExp = /^(0|[1-9]\\d*)$/;\n            if (allIntegerKeys && integerRegExp.test(key)) {\n                maxKey = Math.max(maxKey, Number(key));\n            }\n            else {\n                allIntegerKeys = false;\n            }\n        }\n        if (allIntegerKeys && maxKey < 2 * numKeys) {\n            // convert to array.\n            const array = [];\n            _.forOwn(obj, (val, key) => {\n                array[key] = val;\n            });\n            return array;\n        }\n        return obj;\n    }\n    /** @hidden */\n    _dup(childPath) {\n        const dup = new DataSnapshot(this._data, undefined, this.app, this.instance);\n        [dup._path, dup._childPath] = [this._path, this._childPath];\n        if (childPath) {\n            dup._childPath = path_1.joinPath(dup._childPath, childPath);\n        }\n        return dup;\n    }\n    /** @hidden */\n    _fullPath() {\n        const out = (this._path || '') + '/' + (this._childPath || '');\n        return out;\n    }\n}\nexports.DataSnapshot = DataSnapshot;\n"]},"metadata":{},"sourceType":"script"}