{"ast":null,"code":"\"use strict\"; // The MIT License (MIT)\n//\n// Copyright (c) 2018 Firebase\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the 'Software'), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst cloud_functions_1 = require(\"../cloud-functions\");\n/** @hidden */\n\n\nexports.provider = 'google.firebase.remoteconfig';\n/** @hidden */\n\nexports.service = 'firebaseremoteconfig.googleapis.com';\n/**\n * Registers a function that triggers on Firebase Remote Config template\n * update events.\n *\n * @param handler A function that takes the updated Remote Config\n *   template version metadata as an argument.\n *\n * @return A Cloud Function that you can export and deploy.\n */\n\nfunction onUpdate(handler) {\n  return _onUpdateWithOptions(handler, {});\n}\n\nexports.onUpdate = onUpdate;\n/** @hidden */\n\nfunction _onUpdateWithOptions(handler, options) {\n  const triggerResource = () => {\n    if (!process.env.GCLOUD_PROJECT) {\n      throw new Error('process.env.GCLOUD_PROJECT is not set.');\n    }\n\n    return `projects/${process.env.GCLOUD_PROJECT}`;\n  };\n\n  return new UpdateBuilder(triggerResource, options).onUpdate(handler);\n}\n\nexports._onUpdateWithOptions = _onUpdateWithOptions;\n/** Builder used to create Cloud Functions for Remote Config. */\n\nclass UpdateBuilder {\n  /** @hidden */\n  constructor(triggerResource, options) {\n    this.triggerResource = triggerResource;\n    this.options = options;\n  }\n  /**\n   * Handle all updates (including rollbacks) that affect a Remote Config\n   * project.\n   * @param handler A function that takes the updated Remote Config template\n   * version metadata as an argument.\n   */\n\n\n  onUpdate(handler) {\n    return cloud_functions_1.makeCloudFunction({\n      handler,\n      provider: exports.provider,\n      service: exports.service,\n      triggerResource: this.triggerResource,\n      eventType: 'update',\n      options: this.options\n    });\n  }\n\n}\n\nexports.UpdateBuilder = UpdateBuilder;","map":{"version":3,"sources":["/Users/a3506/Documents/WebDev/Map/WebDev/covid_map/node_modules/firebase-functions/lib/providers/remoteConfig.js"],"names":["Object","defineProperty","exports","value","cloud_functions_1","require","provider","service","onUpdate","handler","_onUpdateWithOptions","options","triggerResource","process","env","GCLOUD_PROJECT","Error","UpdateBuilder","constructor","makeCloudFunction","eventType"],"mappings":"AAAA,a,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,iBAAiB,GAAGC,OAAO,CAAC,oBAAD,CAAjC;AACA;;;AACAH,OAAO,CAACI,QAAR,GAAmB,8BAAnB;AACA;;AACAJ,OAAO,CAACK,OAAR,GAAkB,qCAAlB;AACA;;;;;;;;;;AASA,SAASC,QAAT,CAAkBC,OAAlB,EAA2B;AACvB,SAAOC,oBAAoB,CAACD,OAAD,EAAU,EAAV,CAA3B;AACH;;AACDP,OAAO,CAACM,QAAR,GAAmBA,QAAnB;AACA;;AACA,SAASE,oBAAT,CAA8BD,OAA9B,EAAuCE,OAAvC,EAAgD;AAC5C,QAAMC,eAAe,GAAG,MAAM;AAC1B,QAAI,CAACC,OAAO,CAACC,GAAR,CAAYC,cAAjB,EAAiC;AAC7B,YAAM,IAAIC,KAAJ,CAAU,wCAAV,CAAN;AACH;;AACD,WAAQ,YAAWH,OAAO,CAACC,GAAR,CAAYC,cAAe,EAA9C;AACH,GALD;;AAMA,SAAO,IAAIE,aAAJ,CAAkBL,eAAlB,EAAmCD,OAAnC,EAA4CH,QAA5C,CAAqDC,OAArD,CAAP;AACH;;AACDP,OAAO,CAACQ,oBAAR,GAA+BA,oBAA/B;AACA;;AACA,MAAMO,aAAN,CAAoB;AAChB;AACAC,EAAAA,WAAW,CAACN,eAAD,EAAkBD,OAAlB,EAA2B;AAClC,SAAKC,eAAL,GAAuBA,eAAvB;AACA,SAAKD,OAAL,GAAeA,OAAf;AACH;AACD;;;;;;;;AAMAH,EAAAA,QAAQ,CAACC,OAAD,EAAU;AACd,WAAOL,iBAAiB,CAACe,iBAAlB,CAAoC;AACvCV,MAAAA,OADuC;AAEvCH,MAAAA,QAAQ,EAAEJ,OAAO,CAACI,QAFqB;AAGvCC,MAAAA,OAAO,EAAEL,OAAO,CAACK,OAHsB;AAIvCK,MAAAA,eAAe,EAAE,KAAKA,eAJiB;AAKvCQ,MAAAA,SAAS,EAAE,QAL4B;AAMvCT,MAAAA,OAAO,EAAE,KAAKA;AANyB,KAApC,CAAP;AAQH;;AArBe;;AAuBpBT,OAAO,CAACe,aAAR,GAAwBA,aAAxB","sourcesContent":["\"use strict\";\n// The MIT License (MIT)\n//\n// Copyright (c) 2018 Firebase\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the 'Software'), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst cloud_functions_1 = require(\"../cloud-functions\");\n/** @hidden */\nexports.provider = 'google.firebase.remoteconfig';\n/** @hidden */\nexports.service = 'firebaseremoteconfig.googleapis.com';\n/**\n * Registers a function that triggers on Firebase Remote Config template\n * update events.\n *\n * @param handler A function that takes the updated Remote Config\n *   template version metadata as an argument.\n *\n * @return A Cloud Function that you can export and deploy.\n */\nfunction onUpdate(handler) {\n    return _onUpdateWithOptions(handler, {});\n}\nexports.onUpdate = onUpdate;\n/** @hidden */\nfunction _onUpdateWithOptions(handler, options) {\n    const triggerResource = () => {\n        if (!process.env.GCLOUD_PROJECT) {\n            throw new Error('process.env.GCLOUD_PROJECT is not set.');\n        }\n        return `projects/${process.env.GCLOUD_PROJECT}`;\n    };\n    return new UpdateBuilder(triggerResource, options).onUpdate(handler);\n}\nexports._onUpdateWithOptions = _onUpdateWithOptions;\n/** Builder used to create Cloud Functions for Remote Config. */\nclass UpdateBuilder {\n    /** @hidden */\n    constructor(triggerResource, options) {\n        this.triggerResource = triggerResource;\n        this.options = options;\n    }\n    /**\n     * Handle all updates (including rollbacks) that affect a Remote Config\n     * project.\n     * @param handler A function that takes the updated Remote Config template\n     * version metadata as an argument.\n     */\n    onUpdate(handler) {\n        return cloud_functions_1.makeCloudFunction({\n            handler,\n            provider: exports.provider,\n            service: exports.service,\n            triggerResource: this.triggerResource,\n            eventType: 'update',\n            options: this.options,\n        });\n    }\n}\nexports.UpdateBuilder = UpdateBuilder;\n"]},"metadata":{},"sourceType":"script"}