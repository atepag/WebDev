{"ast":null,"code":"var _jsxFileName = \"/Users/a3506/Documents/WebDev/Map/WebDev/covid_map/src/App.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { GoogleMap, withScriptjs, withGoogleMap, InfoWindow, Marker } from \"react-google-maps\"; //import Markers from \"./components/Markers.js\";\n//import Info from \"./components/Info.js\";\n//import { useFetch } from \"./components/fetch.js\";\n\nfunction Map() {\n  const [selectedCity, setSelectedCity] = useState({\n    lat: null,\n    lng: null\n  });\n\n  function pass(lt, ln) {\n    if (!isNaN(lt) || lt != null) {\n      if (!isNaN(ln) || ln != null) {\n        setSelectedCity({\n          lat: lt,\n          lng: ln\n        });\n      }\n    }\n  }\n\n  const [ccases, setCCases] = useState(null); //var obtain = false;\n  //const [data, setData] = useState({ cases: null });\n\n  useEffect(() => {\n    fetch(\"https://opendata.arcgis.com/datasets/bbb2e4f589ba40d692fab712ae37b9ac_1.geojson\").then(response => response.json()).then(responseJson => setCCases(responseJson) // jsonData is parsed json object received from url\n    );\n    console.log(ccases);\n  }, [setCCases]);\n  return /*#__PURE__*/React.createElement(GoogleMap, {\n    defaultZoom: 3,\n    defaultCenter: {\n      lat: 0,\n      lng: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, ccases && ccases.features.map(place => /*#__PURE__*/React.createElement(Marker, {\n    key: place.properties.OBJECTID,\n    position: {\n      lat: place.properties.Lat,\n      lng: place.properties.Long_\n    },\n    onClick: () => pass(place.properties.Lat, place.properties.Long_),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 11\n    }\n  })), selectedCity.lat != null && selectedCity.lng != null && /*#__PURE__*/React.createElement(InfoWindow, {\n    position: {\n      lat: selectedCity.Lat,\n      lng: selectedCity.lng\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  }, \"a\")));\n}\n\nconst WrappedMap = withScriptjs(withGoogleMap(Map));\n\nfunction App() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    style: {\n      width: \"100vw\",\n      height: \"100vh\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(WrappedMap, {\n    googleMapURL: \"https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=AIzaSyDnwT8wbcgGl3mz0qhqb4dJpdHl6k-D--4\",\n    loadingElement: /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: \"100%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 25\n      }\n    }),\n    containerElement: /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: \"100%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 27\n      }\n    }),\n    mapElement: /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: \"100%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/a3506/Documents/WebDev/Map/WebDev/covid_map/src/App.js"],"names":["React","useState","useEffect","GoogleMap","withScriptjs","withGoogleMap","InfoWindow","Marker","Map","selectedCity","setSelectedCity","lat","lng","pass","lt","ln","isNaN","ccases","setCCases","fetch","then","response","json","responseJson","console","log","features","map","place","properties","OBJECTID","Lat","Long_","WrappedMap","App","width","height"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  GoogleMap,\n  withScriptjs,\n  withGoogleMap,\n  InfoWindow,\n  Marker,\n} from \"react-google-maps\";\n//import Markers from \"./components/Markers.js\";\n//import Info from \"./components/Info.js\";\n//import { useFetch } from \"./components/fetch.js\";\n\nfunction Map() {\n  const [selectedCity, setSelectedCity] = useState({ lat: null, lng: null });\n\n  function pass(lt, ln) {\n    if (!isNaN(lt) || lt != null) {\n      if (!isNaN(ln) || ln != null) {\n        setSelectedCity({ lat: lt, lng: ln });\n      }\n    }\n  }\n  const [ccases, setCCases] = useState(null);\n  //var obtain = false;\n  //const [data, setData] = useState({ cases: null });\n  useEffect(() => {\n    fetch(\n      \"https://opendata.arcgis.com/datasets/bbb2e4f589ba40d692fab712ae37b9ac_1.geojson\"\n    )\n      .then((response) => response.json())\n      .then(\n        (responseJson) => setCCases(responseJson)\n        // jsonData is parsed json object received from url\n      );\n    console.log(ccases);\n  }, [setCCases]);\n  return (\n    <GoogleMap defaultZoom={3} defaultCenter={{ lat: 0, lng: 0 }}>\n      {ccases &&\n        ccases.features.map((place) => (\n          <Marker\n            key={place.properties.OBJECTID}\n            position={{\n              lat: place.properties.Lat,\n              lng: place.properties.Long_,\n            }}\n            onClick={() => pass(place.properties.Lat, place.properties.Long_)}\n          />\n        ))}\n      {selectedCity.lat != null && selectedCity.lng != null && (\n        <InfoWindow\n          position={{\n            lat: selectedCity.Lat,\n            lng: selectedCity.lng,\n          }}\n        >\n          <div>a</div>\n        </InfoWindow>\n      )}\n    </GoogleMap>\n  );\n}\n\nconst WrappedMap = withScriptjs(withGoogleMap(Map));\nfunction App() {\n  return (\n    <div className=\"App\" style={{ width: \"100vw\", height: \"100vh\" }}>\n      <WrappedMap\n        googleMapURL={\n          \"https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=AIzaSyDnwT8wbcgGl3mz0qhqb4dJpdHl6k-D--4\"\n        }\n        loadingElement={<div style={{ height: \"100%\" }} />}\n        containerElement={<div style={{ height: \"100%\" }} />}\n        mapElement={<div style={{ height: \"100%\" }} />}\n      />\n    </div>\n  );\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}