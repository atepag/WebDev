{"ast":null,"code":"var _jsxFileName = \"/Users/a3506/Documents/WebDev/Map/WebDev/covid_map/src/App.js\";\n//Icon author: Icons made by <a href=\"https://www.flaticon.com/authors/freepik\" title=\"Freepik\">Freepik</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\"> www.flaticon.com</a>\nimport React, { useState, useEffect, useRef } from \"react\";\n/*import {\n  GoogleMap,\n  withScriptjs,\n  withGoogleMap,\n  InfoWindow,\n  Marker,\n} from \"react-google-maps\";*/\n\nimport GoogleMapReact from \"google-map-react\";\nimport mapStyle from \"./mapStyle.js\";\nimport useSuperCluster from \"use-supercluster\";\nimport useSwr from \"swr\";\n\nconst fetcher = (...args) => fetch(...args).then(response => response.json());\n\nexport default function App() {\n  const [selectedCity, setSelectedCity] = useState({\n    lat: null,\n    lng: null,\n    cty: null,\n    cnt: null,\n    cnf: null,\n    rcv: null,\n    dth: null\n  });\n\n  function pass(lt, ln, ct, cn, cf, rv, dt) {\n    if (!isNaN(lt) || lt != null) {\n      if (!isNaN(ln) || ln != null) {\n        setSelectedCity({\n          lat: lt,\n          lng: ln,\n          cty: ct,\n          cnt: cn,\n          cnf: cf,\n          rcv: rv,\n          dth: dt\n        });\n      }\n    }\n  }\n  /*const [ccases, setCCases] = useState(null);\n  //var obtain = false;\n  //const [data, setData] = useState({ cases: null });\n  useEffect(() => {\n    fetch(\n      \"https://opendata.arcgis.com/datasets/bbb2e4f589ba40d692fab712ae37b9ac_1.geojson\"\n    )\n      .then((response) => response.json())\n      .then(\n        (responseJson) => setCCases(responseJson)\n        // jsonData is parsed json object received from url\n      );\n  }, [setCCases]);*/\n\n\n  const mapRef = useRef();\n  const [zoom, setZoom] = useState(4);\n  const [bounds, setBounds] = useState(null);\n  const apiUrl = \"https://opendata.arcgis.com/datasets/bbb2e4f589ba40d692fab712ae37b9ac_1.geojson\";\n  const {\n    data,\n    error\n  } = useSwr(apiUrl, fetcher);\n  const ccases = data && !error ? data : [];\n  const points = ccases.features.map(cases => ({\n    type: \"Feature\",\n    properties: {\n      cluster: false,\n      objectId: cases.properties.OBJECTID,\n      lat: cases.properties.Lat,\n      lng: cases.properties.Long_,\n      state: cases.properties.Province_State,\n      country: cases.properties.Country_Region,\n      confirmed: cases.properties.Confirmed,\n      recovered: cases.properties.Recovered,\n      deaths: cases.properties.Deaths\n    },\n    geometry: {\n      type: \"Point\",\n      coordinates: [parseFloat(cases.properties.Long_), parseFloat(cases.properties.Lat)]\n    }\n  }));\n  const {\n    clusters\n  } = useSuperCluster({\n    points,\n    bounds,\n    zoom,\n    options: {\n      radius: 75,\n      maxZoom: 12\n    }\n  });\n  return /*#__PURE__*/React.createElement(GoogleMapReact, {\n    bootstrapURLKeys: {\n      key: \"AIzaSyDnwT8wbcgGl3mz0qhqb4dJpdHl6k-D--4\"\n    },\n    defaultZoom: 4,\n    defaultCenter: {\n      lat: 37.0902,\n      lng: -95.7129\n    },\n    defaultOptions: {\n      styles: mapStyle\n    },\n    yesIWantToUseGoogleMapApiInternals: true,\n    onGoogleApiLoaded: ({\n      map\n    }) => {\n      mapRef.current = map;\n    },\n    onChange: ({\n      zoom,\n      bounds\n    }) => {\n      setZoom(zoom);\n      setBounds([bounds.nw.lng, bounds.se.lat, bounds.se.lng, bounds.nw.lat]);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 5\n    }\n  }, clusters.map(cluster => {\n    const [longitude, latitude] = cluster.geometry.coordinates;\n    const {\n      cluster: isCluster,\n      point_count: pointCount\n    } = cluster.properties;\n\n    if (isCluster) {}\n\n    return /*#__PURE__*/React.createElement(Marker, {\n      key: cluster.properties.objectId,\n      position: {\n        lat: latitude,\n        lng: longitude\n      },\n      onClick: () => pass(cluster.properties.lat, cluster.properties.lng, cluster.properties.state, cluster.properties.country, cluster.properties.confirmed, cluster.properties.recovered, cluster.properties.deaths),\n      icon: {\n        url: \"/coronavirus.svg\",\n        scaledSize: new window.google.maps.Size(Math.log(cluster.properties.confirmed) * 5, Math.log(cluster.properties.confirmed) * 5)\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }\n    });\n  }));\n}\n/*const WrappedMap = withScriptjs(withGoogleMap(Map));\nfunction App() {\n  return (\n    <div className=\"App\" style={{ width: \"100vw\", height: \"100vh\" }}>\n      <WrappedMap\n        googleMapURL={\n          \"https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=AIzaSyDnwT8wbcgGl3mz0qhqb4dJpdHl6k-D--4\"\n        }\n        loadingElement={<div style={{ height: \"100%\" }} />}\n        containerElement={<div style={{ height: \"100%\" }} />}\n        mapElement={<div style={{ height: \"100%\" }} />}\n      />\n    </div>\n  );\n}\nexport default App;*/","map":{"version":3,"sources":["/Users/a3506/Documents/WebDev/Map/WebDev/covid_map/src/App.js"],"names":["React","useState","useEffect","useRef","GoogleMapReact","mapStyle","useSuperCluster","useSwr","fetcher","args","fetch","then","response","json","App","selectedCity","setSelectedCity","lat","lng","cty","cnt","cnf","rcv","dth","pass","lt","ln","ct","cn","cf","rv","dt","isNaN","mapRef","zoom","setZoom","bounds","setBounds","apiUrl","data","error","ccases","points","features","map","cases","type","properties","cluster","objectId","OBJECTID","Lat","Long_","state","Province_State","country","Country_Region","confirmed","Confirmed","recovered","Recovered","deaths","Deaths","geometry","coordinates","parseFloat","clusters","options","radius","maxZoom","key","styles","current","nw","se","longitude","latitude","isCluster","point_count","pointCount","url","scaledSize","window","google","maps","Size","Math","log"],"mappings":"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","sourcesContent":["//Icon author: Icons made by <a href=\"https://www.flaticon.com/authors/freepik\" title=\"Freepik\">Freepik</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\"> www.flaticon.com</a>\n\nimport React, { useState, useEffect, useRef } from \"react\";\n/*import {\n  GoogleMap,\n  withScriptjs,\n  withGoogleMap,\n  InfoWindow,\n  Marker,\n} from \"react-google-maps\";*/\nimport GoogleMapReact from \"google-map-react\";\nimport mapStyle from \"./mapStyle.js\";\nimport useSuperCluster from \"use-supercluster\";\nimport useSwr from \"swr\";\n\nconst fetcher = (...args) => fetch(...args).then((response) => response.json());\nexport default function App() {\n  const [selectedCity, setSelectedCity] = useState({\n    lat: null,\n    lng: null,\n    cty: null,\n    cnt: null,\n    cnf: null,\n    rcv: null,\n    dth: null,\n  });\n\n  function pass(lt, ln, ct, cn, cf, rv, dt) {\n    if (!isNaN(lt) || lt != null) {\n      if (!isNaN(ln) || ln != null) {\n        setSelectedCity({\n          lat: lt,\n          lng: ln,\n          cty: ct,\n          cnt: cn,\n          cnf: cf,\n          rcv: rv,\n          dth: dt,\n        });\n      }\n    }\n  }\n  /*const [ccases, setCCases] = useState(null);\n  //var obtain = false;\n  //const [data, setData] = useState({ cases: null });\n  useEffect(() => {\n    fetch(\n      \"https://opendata.arcgis.com/datasets/bbb2e4f589ba40d692fab712ae37b9ac_1.geojson\"\n    )\n      .then((response) => response.json())\n      .then(\n        (responseJson) => setCCases(responseJson)\n        // jsonData is parsed json object received from url\n      );\n  }, [setCCases]);*/\n\n  const mapRef = useRef();\n  const [zoom, setZoom] = useState(4);\n  const [bounds, setBounds] = useState(null);\n  const apiUrl =\n    \"https://opendata.arcgis.com/datasets/bbb2e4f589ba40d692fab712ae37b9ac_1.geojson\";\n  const { data, error } = useSwr(apiUrl, fetcher);\n  const ccases = data && !error ? data : [];\n\n  const points = ccases.features.map((cases) => ({\n    type: \"Feature\",\n    properties: {\n      cluster: false,\n      objectId: cases.properties.OBJECTID,\n      lat: cases.properties.Lat,\n      lng: cases.properties.Long_,\n      state: cases.properties.Province_State,\n      country: cases.properties.Country_Region,\n      confirmed: cases.properties.Confirmed,\n      recovered: cases.properties.Recovered,\n      deaths: cases.properties.Deaths,\n    },\n    geometry: {\n      type: \"Point\",\n      coordinates: [\n        parseFloat(cases.properties.Long_),\n        parseFloat(cases.properties.Lat),\n      ],\n    },\n  }));\n\n  const { clusters } = useSuperCluster({\n    points,\n    bounds,\n    zoom,\n    options: { radius: 75, maxZoom: 12 },\n  });\n  return (\n    <GoogleMapReact\n      bootstrapURLKeys={{ key: \"AIzaSyDnwT8wbcgGl3mz0qhqb4dJpdHl6k-D--4\" }}\n      defaultZoom={4}\n      defaultCenter={{ lat: 37.0902, lng: -95.7129 }}\n      defaultOptions={{ styles: mapStyle }}\n      yesIWantToUseGoogleMapApiInternals\n      onGoogleApiLoaded={({ map }) => {\n        mapRef.current = map;\n      }}\n      onChange={({ zoom, bounds }) => {\n        setZoom(zoom);\n        setBounds([bounds.nw.lng, bounds.se.lat, bounds.se.lng, bounds.nw.lat]);\n      }}\n    >\n      {clusters.map((cluster) => {\n        const [longitude, latitude] = cluster.geometry.coordinates;\n        const {\n          cluster: isCluster,\n          point_count: pointCount,\n        } = cluster.properties;\n\n        if (isCluster) {\n        }\n        return (\n          <Marker\n            key={cluster.properties.objectId}\n            position={{\n              lat: latitude,\n              lng: longitude,\n            }}\n            onClick={() =>\n              pass(\n                cluster.properties.lat,\n                cluster.properties.lng,\n                cluster.properties.state,\n                cluster.properties.country,\n                cluster.properties.confirmed,\n                cluster.properties.recovered,\n                cluster.properties.deaths\n              )\n            }\n            icon={{\n              url: \"/coronavirus.svg\",\n              scaledSize: new window.google.maps.Size(\n                Math.log(cluster.properties.confirmed) * 5,\n                Math.log(cluster.properties.confirmed) * 5\n              ),\n            }}\n          />\n        );\n      })}\n    </GoogleMapReact>\n  );\n}\n\n/*const WrappedMap = withScriptjs(withGoogleMap(Map));\nfunction App() {\n  return (\n    <div className=\"App\" style={{ width: \"100vw\", height: \"100vh\" }}>\n      <WrappedMap\n        googleMapURL={\n          \"https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=AIzaSyDnwT8wbcgGl3mz0qhqb4dJpdHl6k-D--4\"\n        }\n        loadingElement={<div style={{ height: \"100%\" }} />}\n        containerElement={<div style={{ height: \"100%\" }} />}\n        mapElement={<div style={{ height: \"100%\" }} />}\n      />\n    </div>\n  );\n}\nexport default App;*/\n"]},"metadata":{},"sourceType":"module"}